import type { Prisma, PrismaClient } from '@prisma/client';
import type { hkt } from '@casl/ability';
import type { ExtractModelName, Model } from './prisma/prismaQuery';
export declare type ModelName = Prisma.ModelName;
declare type ModelWhereInput = {
    [K in Prisma.ModelName]: Uncapitalize<K> extends keyof PrismaClient ? Extract<Parameters<PrismaClient[Uncapitalize<K>]['findFirst']>[0], {
        where?: any;
    }>['where'] : never;
};
export declare type WhereInput<TModelName extends Prisma.ModelName> = Extract<ModelWhereInput[TModelName], Record<any, any>>;
interface PrismaQueryTypeFactory extends hkt.GenericFactory {
    produce: WhereInput<ExtractModelName<this[0], ModelName>>;
}
declare type PrismaModel = Model<Record<string, any>, string>;
export declare type PrismaQuery<T extends PrismaModel = PrismaModel> = WhereInput<ExtractModelName<T, ModelName>> & hkt.Container<PrismaQueryTypeFactory>;
export declare type WhereInputPerModel = {
    [K in ModelName]: WhereInput<K>;
};
export {};
