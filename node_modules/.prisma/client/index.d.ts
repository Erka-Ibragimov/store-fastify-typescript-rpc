
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  surname: string | null
  username: string | null
  password: string | null
  photoPath: string | null
  phoneNumber: string | null
  isAdmin: boolean
  role: string
  permissions: Prisma.JsonValue
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  token: string
  userId: string | null
  createdAt: Date
  expiresAt: Date | null
}

/**
 * Model Basket
 * 
 */
export type Basket = {
  id: string
  userId: string
}

/**
 * Model BasketDevice
 * 
 */
export type BasketDevice = {
  basketId: string
  deviceId: string
}

/**
 * Model Device
 * 
 */
export type Device = {
  id: string
  staticId: number | null
  name: string
  price: string
  rate: number | null
  count: number
  pathImg: string | null
  typeId: string | null
  brandId: string | null
}

/**
 * Model DeviceInfo
 * 
 */
export type DeviceInfo = {
  id: string
  deviceId: string
  title: string
  description: string
}

/**
 * Model Rating
 * 
 */
export type Rating = {
  id: string
  rate: number
  userId: string
  deviceId: string
}

/**
 * Model Type
 * 
 */
export type Type = {
  id: string
  name: string
}

/**
 * Model Brand
 * 
 */
export type Brand = {
  id: string
  name: string
}

/**
 * Model TypeBrand
 * 
 */
export type TypeBrand = {
  id: string
  typeId: string | null
  brandId: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.basket`: Exposes CRUD operations for the **Basket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baskets
    * const baskets = await prisma.basket.findMany()
    * ```
    */
  get basket(): Prisma.BasketDelegate<GlobalReject>;

  /**
   * `prisma.basketDevice`: Exposes CRUD operations for the **BasketDevice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BasketDevices
    * const basketDevices = await prisma.basketDevice.findMany()
    * ```
    */
  get basketDevice(): Prisma.BasketDeviceDelegate<GlobalReject>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<GlobalReject>;

  /**
   * `prisma.deviceInfo`: Exposes CRUD operations for the **DeviceInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceInfos
    * const deviceInfos = await prisma.deviceInfo.findMany()
    * ```
    */
  get deviceInfo(): Prisma.DeviceInfoDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<GlobalReject>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<GlobalReject>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<GlobalReject>;

  /**
   * `prisma.typeBrand`: Exposes CRUD operations for the **TypeBrand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypeBrands
    * const typeBrands = await prisma.typeBrand.findMany()
    * ```
    */
  get typeBrand(): Prisma.TypeBrandDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Basket: 'Basket',
    BasketDevice: 'BasketDevice',
    Device: 'Device',
    DeviceInfo: 'DeviceInfo',
    Rating: 'Rating',
    Type: 'Type',
    Brand: 'Brand',
    TypeBrand: 'TypeBrand'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    rating: number
    session: number
  }

  export type UserCountOutputTypeSelect = {
    rating?: boolean
    session?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type BasketCountOutputType
   */


  export type BasketCountOutputType = {
    basketDevice: number
  }

  export type BasketCountOutputTypeSelect = {
    basketDevice?: boolean
  }

  export type BasketCountOutputTypeGetPayload<S extends boolean | null | undefined | BasketCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BasketCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BasketCountOutputTypeArgs)
    ? BasketCountOutputType 
    : S extends { select: any } & (BasketCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BasketCountOutputType ? BasketCountOutputType[P] : never
  } 
      : BasketCountOutputType




  // Custom InputTypes

  /**
   * BasketCountOutputType without action
   */
  export type BasketCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BasketCountOutputType
     */
    select?: BasketCountOutputTypeSelect | null
  }



  /**
   * Count Type DeviceCountOutputType
   */


  export type DeviceCountOutputType = {
    devices: number
    deviceInfo: number
    rating: number
  }

  export type DeviceCountOutputTypeSelect = {
    devices?: boolean
    deviceInfo?: boolean
    rating?: boolean
  }

  export type DeviceCountOutputTypeGetPayload<S extends boolean | null | undefined | DeviceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DeviceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DeviceCountOutputTypeArgs)
    ? DeviceCountOutputType 
    : S extends { select: any } & (DeviceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DeviceCountOutputType ? DeviceCountOutputType[P] : never
  } 
      : DeviceCountOutputType




  // Custom InputTypes

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     */
    select?: DeviceCountOutputTypeSelect | null
  }



  /**
   * Count Type TypeCountOutputType
   */


  export type TypeCountOutputType = {
    device: number
    brand: number
  }

  export type TypeCountOutputTypeSelect = {
    device?: boolean
    brand?: boolean
  }

  export type TypeCountOutputTypeGetPayload<S extends boolean | null | undefined | TypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TypeCountOutputTypeArgs)
    ? TypeCountOutputType 
    : S extends { select: any } & (TypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TypeCountOutputType ? TypeCountOutputType[P] : never
  } 
      : TypeCountOutputType




  // Custom InputTypes

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect | null
  }



  /**
   * Count Type BrandCountOutputType
   */


  export type BrandCountOutputType = {
    device: number
    type: number
  }

  export type BrandCountOutputTypeSelect = {
    device?: boolean
    type?: boolean
  }

  export type BrandCountOutputTypeGetPayload<S extends boolean | null | undefined | BrandCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BrandCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BrandCountOutputTypeArgs)
    ? BrandCountOutputType 
    : S extends { select: any } & (BrandCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BrandCountOutputType ? BrandCountOutputType[P] : never
  } 
      : BrandCountOutputType




  // Custom InputTypes

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    username: string | null
    password: string | null
    photoPath: string | null
    phoneNumber: string | null
    isAdmin: boolean | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    username: string | null
    password: string | null
    photoPath: string | null
    phoneNumber: string | null
    isAdmin: boolean | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    surname: number
    username: number
    password: number
    photoPath: number
    phoneNumber: number
    isAdmin: number
    role: number
    permissions: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    photoPath?: true
    phoneNumber?: true
    isAdmin?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    photoPath?: true
    phoneNumber?: true
    isAdmin?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    username?: true
    password?: true
    photoPath?: true
    phoneNumber?: true
    isAdmin?: true
    role?: true
    permissions?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    surname: string | null
    username: string | null
    password: string | null
    photoPath: string | null
    phoneNumber: string | null
    isAdmin: boolean
    role: string
    permissions: JsonValue
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    surname?: boolean
    username?: boolean
    password?: boolean
    photoPath?: boolean
    phoneNumber?: boolean
    isAdmin?: boolean
    role?: boolean
    permissions?: boolean
    basket?: boolean | BasketArgs
    rating?: boolean | User$ratingArgs
    session?: boolean | User$sessionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    basket?: boolean | BasketArgs
    rating?: boolean | User$ratingArgs
    session?: boolean | User$sessionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'basket' ? BasketGetPayload<S['include'][P]> | null :
        P extends 'rating' ? Array < RatingGetPayload<S['include'][P]>>  :
        P extends 'session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'basket' ? BasketGetPayload<S['select'][P]> | null :
        P extends 'rating' ? Array < RatingGetPayload<S['select'][P]>>  :
        P extends 'session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    basket<T extends BasketArgs= {}>(args?: Subset<T, BasketArgs>): Prisma__BasketClient<BasketGetPayload<T> | Null>;

    rating<T extends User$ratingArgs= {}>(args?: Subset<T, User$ratingArgs>): Prisma.PrismaPromise<Array<RatingGetPayload<T>>| Null>;

    session<T extends User$sessionArgs= {}>(args?: Subset<T, User$sessionArgs>): Prisma.PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.rating
   */
  export type User$ratingArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * User.session
   */
  export type User$sessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    token: string
    userId: string | null
    createdAt: Date
    expiresAt: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserArgs
  }


  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model Basket
   */


  export type AggregateBasket = {
    _count: BasketCountAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  export type BasketMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type BasketMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type BasketCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type BasketMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BasketMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BasketCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type BasketAggregateArgs = {
    /**
     * Filter which Basket to aggregate.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: Enumerable<BasketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baskets
    **/
    _count?: true | BasketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketMaxAggregateInputType
  }

  export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
        [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasket[P]>
      : GetScalarType<T[P], AggregateBasket[P]>
  }




  export type BasketGroupByArgs = {
    where?: BasketWhereInput
    orderBy?: Enumerable<BasketOrderByWithAggregationInput>
    by: BasketScalarFieldEnum[]
    having?: BasketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketCountAggregateInputType | true
    _min?: BasketMinAggregateInputType
    _max?: BasketMaxAggregateInputType
  }


  export type BasketGroupByOutputType = {
    id: string
    userId: string
    _count: BasketCountAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BasketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketGroupByOutputType[P]>
            : GetScalarType<T[P], BasketGroupByOutputType[P]>
        }
      >
    >


  export type BasketSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    basketDevice?: boolean | Basket$basketDeviceArgs
    _count?: boolean | BasketCountOutputTypeArgs
  }


  export type BasketInclude = {
    user?: boolean | UserArgs
    basketDevice?: boolean | Basket$basketDeviceArgs
    _count?: boolean | BasketCountOutputTypeArgs
  }

  export type BasketGetPayload<S extends boolean | null | undefined | BasketArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Basket :
    S extends undefined ? never :
    S extends { include: any } & (BasketArgs | BasketFindManyArgs)
    ? Basket  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'basketDevice' ? Array < BasketDeviceGetPayload<S['include'][P]>>  :
        P extends '_count' ? BasketCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BasketArgs | BasketFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'basketDevice' ? Array < BasketDeviceGetPayload<S['select'][P]>>  :
        P extends '_count' ? BasketCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Basket ? Basket[P] : never
  } 
      : Basket


  type BasketCountArgs = 
    Omit<BasketFindManyArgs, 'select' | 'include'> & {
      select?: BasketCountAggregateInputType | true
    }

  export interface BasketDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Basket that matches the filter.
     * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BasketFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BasketFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Basket'> extends True ? Prisma__BasketClient<BasketGetPayload<T>> : Prisma__BasketClient<BasketGetPayload<T> | null, null>

    /**
     * Find one Basket that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BasketFindUniqueOrThrowArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Find the first Basket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BasketFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BasketFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Basket'> extends True ? Prisma__BasketClient<BasketGetPayload<T>> : Prisma__BasketClient<BasketGetPayload<T> | null, null>

    /**
     * Find the first Basket that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BasketFindFirstOrThrowArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Find zero or more Baskets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baskets
     * const baskets = await prisma.basket.findMany()
     * 
     * // Get first 10 Baskets
     * const baskets = await prisma.basket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BasketFindManyArgs>(
      args?: SelectSubset<T, BasketFindManyArgs>
    ): Prisma.PrismaPromise<Array<BasketGetPayload<T>>>

    /**
     * Create a Basket.
     * @param {BasketCreateArgs} args - Arguments to create a Basket.
     * @example
     * // Create one Basket
     * const Basket = await prisma.basket.create({
     *   data: {
     *     // ... data to create a Basket
     *   }
     * })
     * 
    **/
    create<T extends BasketCreateArgs>(
      args: SelectSubset<T, BasketCreateArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Create many Baskets.
     *     @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
     *     @example
     *     // Create many Baskets
     *     const basket = await prisma.basket.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BasketCreateManyArgs>(
      args?: SelectSubset<T, BasketCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Basket.
     * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
     * @example
     * // Delete one Basket
     * const Basket = await prisma.basket.delete({
     *   where: {
     *     // ... filter to delete one Basket
     *   }
     * })
     * 
    **/
    delete<T extends BasketDeleteArgs>(
      args: SelectSubset<T, BasketDeleteArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Update one Basket.
     * @param {BasketUpdateArgs} args - Arguments to update one Basket.
     * @example
     * // Update one Basket
     * const basket = await prisma.basket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BasketUpdateArgs>(
      args: SelectSubset<T, BasketUpdateArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Delete zero or more Baskets.
     * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
     * @example
     * // Delete a few Baskets
     * const { count } = await prisma.basket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BasketDeleteManyArgs>(
      args?: SelectSubset<T, BasketDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BasketUpdateManyArgs>(
      args: SelectSubset<T, BasketUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Basket.
     * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
     * @example
     * // Update or create a Basket
     * const basket = await prisma.basket.upsert({
     *   create: {
     *     // ... data to create a Basket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Basket we want to update
     *   }
     * })
    **/
    upsert<T extends BasketUpsertArgs>(
      args: SelectSubset<T, BasketUpsertArgs>
    ): Prisma__BasketClient<BasketGetPayload<T>>

    /**
     * Count the number of Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
     * @example
     * // Count the number of Baskets
     * const count = await prisma.basket.count({
     *   where: {
     *     // ... the filter for the Baskets we want to count
     *   }
     * })
    **/
    count<T extends BasketCountArgs>(
      args?: Subset<T, BasketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketAggregateArgs>(args: Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

    /**
     * Group by Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketGroupByArgs['orderBy'] }
        : { orderBy?: BasketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Basket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BasketClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    basketDevice<T extends Basket$basketDeviceArgs= {}>(args?: Subset<T, Basket$basketDeviceArgs>): Prisma.PrismaPromise<Array<BasketDeviceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Basket base type for findUnique actions
   */
  export type BasketFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findUnique
   */
  export interface BasketFindUniqueArgs extends BasketFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Basket findUniqueOrThrow
   */
  export type BasketFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }


  /**
   * Basket base type for findFirst actions
   */
  export type BasketFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: Enumerable<BasketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: Enumerable<BasketScalarFieldEnum>
  }

  /**
   * Basket findFirst
   */
  export interface BasketFindFirstArgs extends BasketFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Basket findFirstOrThrow
   */
  export type BasketFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: Enumerable<BasketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: Enumerable<BasketScalarFieldEnum>
  }


  /**
   * Basket findMany
   */
  export type BasketFindManyArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter, which Baskets to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: Enumerable<BasketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    distinct?: Enumerable<BasketScalarFieldEnum>
  }


  /**
   * Basket create
   */
  export type BasketCreateArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * The data needed to create a Basket.
     */
    data: XOR<BasketCreateInput, BasketUncheckedCreateInput>
  }


  /**
   * Basket createMany
   */
  export type BasketCreateManyArgs = {
    /**
     * The data used to create many Baskets.
     */
    data: Enumerable<BasketCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Basket update
   */
  export type BasketUpdateArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * The data needed to update a Basket.
     */
    data: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
    /**
     * Choose, which Basket to update.
     */
    where: BasketWhereUniqueInput
  }


  /**
   * Basket updateMany
   */
  export type BasketUpdateManyArgs = {
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
  }


  /**
   * Basket upsert
   */
  export type BasketUpsertArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * The filter to search for the Basket to update in case it exists.
     */
    where: BasketWhereUniqueInput
    /**
     * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
     */
    create: XOR<BasketCreateInput, BasketUncheckedCreateInput>
    /**
     * In case the Basket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
  }


  /**
   * Basket delete
   */
  export type BasketDeleteArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
    /**
     * Filter which Basket to delete.
     */
    where: BasketWhereUniqueInput
  }


  /**
   * Basket deleteMany
   */
  export type BasketDeleteManyArgs = {
    /**
     * Filter which Baskets to delete
     */
    where?: BasketWhereInput
  }


  /**
   * Basket.basketDevice
   */
  export type Basket$basketDeviceArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    where?: BasketDeviceWhereInput
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    cursor?: BasketDeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BasketDeviceScalarFieldEnum>
  }


  /**
   * Basket without action
   */
  export type BasketArgs = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketInclude | null
  }



  /**
   * Model BasketDevice
   */


  export type AggregateBasketDevice = {
    _count: BasketDeviceCountAggregateOutputType | null
    _min: BasketDeviceMinAggregateOutputType | null
    _max: BasketDeviceMaxAggregateOutputType | null
  }

  export type BasketDeviceMinAggregateOutputType = {
    basketId: string | null
    deviceId: string | null
  }

  export type BasketDeviceMaxAggregateOutputType = {
    basketId: string | null
    deviceId: string | null
  }

  export type BasketDeviceCountAggregateOutputType = {
    basketId: number
    deviceId: number
    _all: number
  }


  export type BasketDeviceMinAggregateInputType = {
    basketId?: true
    deviceId?: true
  }

  export type BasketDeviceMaxAggregateInputType = {
    basketId?: true
    deviceId?: true
  }

  export type BasketDeviceCountAggregateInputType = {
    basketId?: true
    deviceId?: true
    _all?: true
  }

  export type BasketDeviceAggregateArgs = {
    /**
     * Filter which BasketDevice to aggregate.
     */
    where?: BasketDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketDevices to fetch.
     */
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BasketDevices
    **/
    _count?: true | BasketDeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketDeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketDeviceMaxAggregateInputType
  }

  export type GetBasketDeviceAggregateType<T extends BasketDeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateBasketDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasketDevice[P]>
      : GetScalarType<T[P], AggregateBasketDevice[P]>
  }




  export type BasketDeviceGroupByArgs = {
    where?: BasketDeviceWhereInput
    orderBy?: Enumerable<BasketDeviceOrderByWithAggregationInput>
    by: BasketDeviceScalarFieldEnum[]
    having?: BasketDeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketDeviceCountAggregateInputType | true
    _min?: BasketDeviceMinAggregateInputType
    _max?: BasketDeviceMaxAggregateInputType
  }


  export type BasketDeviceGroupByOutputType = {
    basketId: string
    deviceId: string
    _count: BasketDeviceCountAggregateOutputType | null
    _min: BasketDeviceMinAggregateOutputType | null
    _max: BasketDeviceMaxAggregateOutputType | null
  }

  type GetBasketDeviceGroupByPayload<T extends BasketDeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BasketDeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketDeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketDeviceGroupByOutputType[P]>
            : GetScalarType<T[P], BasketDeviceGroupByOutputType[P]>
        }
      >
    >


  export type BasketDeviceSelect = {
    basketId?: boolean
    deviceId?: boolean
    basket?: boolean | BasketArgs
    device?: boolean | DeviceArgs
  }


  export type BasketDeviceInclude = {
    basket?: boolean | BasketArgs
    device?: boolean | DeviceArgs
  }

  export type BasketDeviceGetPayload<S extends boolean | null | undefined | BasketDeviceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BasketDevice :
    S extends undefined ? never :
    S extends { include: any } & (BasketDeviceArgs | BasketDeviceFindManyArgs)
    ? BasketDevice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'basket' ? BasketGetPayload<S['include'][P]> :
        P extends 'device' ? DeviceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BasketDeviceArgs | BasketDeviceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'basket' ? BasketGetPayload<S['select'][P]> :
        P extends 'device' ? DeviceGetPayload<S['select'][P]> :  P extends keyof BasketDevice ? BasketDevice[P] : never
  } 
      : BasketDevice


  type BasketDeviceCountArgs = 
    Omit<BasketDeviceFindManyArgs, 'select' | 'include'> & {
      select?: BasketDeviceCountAggregateInputType | true
    }

  export interface BasketDeviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BasketDevice that matches the filter.
     * @param {BasketDeviceFindUniqueArgs} args - Arguments to find a BasketDevice
     * @example
     * // Get one BasketDevice
     * const basketDevice = await prisma.basketDevice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BasketDeviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BasketDeviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BasketDevice'> extends True ? Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>> : Prisma__BasketDeviceClient<BasketDeviceGetPayload<T> | null, null>

    /**
     * Find one BasketDevice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BasketDeviceFindUniqueOrThrowArgs} args - Arguments to find a BasketDevice
     * @example
     * // Get one BasketDevice
     * const basketDevice = await prisma.basketDevice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BasketDeviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BasketDeviceFindUniqueOrThrowArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Find the first BasketDevice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceFindFirstArgs} args - Arguments to find a BasketDevice
     * @example
     * // Get one BasketDevice
     * const basketDevice = await prisma.basketDevice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BasketDeviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BasketDeviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BasketDevice'> extends True ? Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>> : Prisma__BasketDeviceClient<BasketDeviceGetPayload<T> | null, null>

    /**
     * Find the first BasketDevice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceFindFirstOrThrowArgs} args - Arguments to find a BasketDevice
     * @example
     * // Get one BasketDevice
     * const basketDevice = await prisma.basketDevice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BasketDeviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BasketDeviceFindFirstOrThrowArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Find zero or more BasketDevices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BasketDevices
     * const basketDevices = await prisma.basketDevice.findMany()
     * 
     * // Get first 10 BasketDevices
     * const basketDevices = await prisma.basketDevice.findMany({ take: 10 })
     * 
     * // Only select the `basketId`
     * const basketDeviceWithBasketIdOnly = await prisma.basketDevice.findMany({ select: { basketId: true } })
     * 
    **/
    findMany<T extends BasketDeviceFindManyArgs>(
      args?: SelectSubset<T, BasketDeviceFindManyArgs>
    ): Prisma.PrismaPromise<Array<BasketDeviceGetPayload<T>>>

    /**
     * Create a BasketDevice.
     * @param {BasketDeviceCreateArgs} args - Arguments to create a BasketDevice.
     * @example
     * // Create one BasketDevice
     * const BasketDevice = await prisma.basketDevice.create({
     *   data: {
     *     // ... data to create a BasketDevice
     *   }
     * })
     * 
    **/
    create<T extends BasketDeviceCreateArgs>(
      args: SelectSubset<T, BasketDeviceCreateArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Create many BasketDevices.
     *     @param {BasketDeviceCreateManyArgs} args - Arguments to create many BasketDevices.
     *     @example
     *     // Create many BasketDevices
     *     const basketDevice = await prisma.basketDevice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BasketDeviceCreateManyArgs>(
      args?: SelectSubset<T, BasketDeviceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BasketDevice.
     * @param {BasketDeviceDeleteArgs} args - Arguments to delete one BasketDevice.
     * @example
     * // Delete one BasketDevice
     * const BasketDevice = await prisma.basketDevice.delete({
     *   where: {
     *     // ... filter to delete one BasketDevice
     *   }
     * })
     * 
    **/
    delete<T extends BasketDeviceDeleteArgs>(
      args: SelectSubset<T, BasketDeviceDeleteArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Update one BasketDevice.
     * @param {BasketDeviceUpdateArgs} args - Arguments to update one BasketDevice.
     * @example
     * // Update one BasketDevice
     * const basketDevice = await prisma.basketDevice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BasketDeviceUpdateArgs>(
      args: SelectSubset<T, BasketDeviceUpdateArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Delete zero or more BasketDevices.
     * @param {BasketDeviceDeleteManyArgs} args - Arguments to filter BasketDevices to delete.
     * @example
     * // Delete a few BasketDevices
     * const { count } = await prisma.basketDevice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BasketDeviceDeleteManyArgs>(
      args?: SelectSubset<T, BasketDeviceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BasketDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BasketDevices
     * const basketDevice = await prisma.basketDevice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BasketDeviceUpdateManyArgs>(
      args: SelectSubset<T, BasketDeviceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BasketDevice.
     * @param {BasketDeviceUpsertArgs} args - Arguments to update or create a BasketDevice.
     * @example
     * // Update or create a BasketDevice
     * const basketDevice = await prisma.basketDevice.upsert({
     *   create: {
     *     // ... data to create a BasketDevice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BasketDevice we want to update
     *   }
     * })
    **/
    upsert<T extends BasketDeviceUpsertArgs>(
      args: SelectSubset<T, BasketDeviceUpsertArgs>
    ): Prisma__BasketDeviceClient<BasketDeviceGetPayload<T>>

    /**
     * Count the number of BasketDevices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceCountArgs} args - Arguments to filter BasketDevices to count.
     * @example
     * // Count the number of BasketDevices
     * const count = await prisma.basketDevice.count({
     *   where: {
     *     // ... the filter for the BasketDevices we want to count
     *   }
     * })
    **/
    count<T extends BasketDeviceCountArgs>(
      args?: Subset<T, BasketDeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketDeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BasketDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketDeviceAggregateArgs>(args: Subset<T, BasketDeviceAggregateArgs>): Prisma.PrismaPromise<GetBasketDeviceAggregateType<T>>

    /**
     * Group by BasketDevice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketDeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketDeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketDeviceGroupByArgs['orderBy'] }
        : { orderBy?: BasketDeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketDeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BasketDevice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BasketDeviceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    basket<T extends BasketArgs= {}>(args?: Subset<T, BasketArgs>): Prisma__BasketClient<BasketGetPayload<T> | Null>;

    device<T extends DeviceArgs= {}>(args?: Subset<T, DeviceArgs>): Prisma__DeviceClient<DeviceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BasketDevice base type for findUnique actions
   */
  export type BasketDeviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter, which BasketDevice to fetch.
     */
    where: BasketDeviceWhereUniqueInput
  }

  /**
   * BasketDevice findUnique
   */
  export interface BasketDeviceFindUniqueArgs extends BasketDeviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BasketDevice findUniqueOrThrow
   */
  export type BasketDeviceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter, which BasketDevice to fetch.
     */
    where: BasketDeviceWhereUniqueInput
  }


  /**
   * BasketDevice base type for findFirst actions
   */
  export type BasketDeviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter, which BasketDevice to fetch.
     */
    where?: BasketDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketDevices to fetch.
     */
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BasketDevices.
     */
    cursor?: BasketDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BasketDevices.
     */
    distinct?: Enumerable<BasketDeviceScalarFieldEnum>
  }

  /**
   * BasketDevice findFirst
   */
  export interface BasketDeviceFindFirstArgs extends BasketDeviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BasketDevice findFirstOrThrow
   */
  export type BasketDeviceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter, which BasketDevice to fetch.
     */
    where?: BasketDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketDevices to fetch.
     */
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BasketDevices.
     */
    cursor?: BasketDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketDevices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BasketDevices.
     */
    distinct?: Enumerable<BasketDeviceScalarFieldEnum>
  }


  /**
   * BasketDevice findMany
   */
  export type BasketDeviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter, which BasketDevices to fetch.
     */
    where?: BasketDeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketDevices to fetch.
     */
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BasketDevices.
     */
    cursor?: BasketDeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketDevices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketDevices.
     */
    skip?: number
    distinct?: Enumerable<BasketDeviceScalarFieldEnum>
  }


  /**
   * BasketDevice create
   */
  export type BasketDeviceCreateArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * The data needed to create a BasketDevice.
     */
    data: XOR<BasketDeviceCreateInput, BasketDeviceUncheckedCreateInput>
  }


  /**
   * BasketDevice createMany
   */
  export type BasketDeviceCreateManyArgs = {
    /**
     * The data used to create many BasketDevices.
     */
    data: Enumerable<BasketDeviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BasketDevice update
   */
  export type BasketDeviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * The data needed to update a BasketDevice.
     */
    data: XOR<BasketDeviceUpdateInput, BasketDeviceUncheckedUpdateInput>
    /**
     * Choose, which BasketDevice to update.
     */
    where: BasketDeviceWhereUniqueInput
  }


  /**
   * BasketDevice updateMany
   */
  export type BasketDeviceUpdateManyArgs = {
    /**
     * The data used to update BasketDevices.
     */
    data: XOR<BasketDeviceUpdateManyMutationInput, BasketDeviceUncheckedUpdateManyInput>
    /**
     * Filter which BasketDevices to update
     */
    where?: BasketDeviceWhereInput
  }


  /**
   * BasketDevice upsert
   */
  export type BasketDeviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * The filter to search for the BasketDevice to update in case it exists.
     */
    where: BasketDeviceWhereUniqueInput
    /**
     * In case the BasketDevice found by the `where` argument doesn't exist, create a new BasketDevice with this data.
     */
    create: XOR<BasketDeviceCreateInput, BasketDeviceUncheckedCreateInput>
    /**
     * In case the BasketDevice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketDeviceUpdateInput, BasketDeviceUncheckedUpdateInput>
  }


  /**
   * BasketDevice delete
   */
  export type BasketDeviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    /**
     * Filter which BasketDevice to delete.
     */
    where: BasketDeviceWhereUniqueInput
  }


  /**
   * BasketDevice deleteMany
   */
  export type BasketDeviceDeleteManyArgs = {
    /**
     * Filter which BasketDevices to delete
     */
    where?: BasketDeviceWhereInput
  }


  /**
   * BasketDevice without action
   */
  export type BasketDeviceArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
  }



  /**
   * Model Device
   */


  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceAvgAggregateOutputType = {
    staticId: number | null
    rate: number | null
    count: number | null
  }

  export type DeviceSumAggregateOutputType = {
    staticId: number | null
    rate: number | null
    count: number | null
  }

  export type DeviceMinAggregateOutputType = {
    id: string | null
    staticId: number | null
    name: string | null
    price: string | null
    rate: number | null
    count: number | null
    pathImg: string | null
    typeId: string | null
    brandId: string | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: string | null
    staticId: number | null
    name: string | null
    price: string | null
    rate: number | null
    count: number | null
    pathImg: string | null
    typeId: string | null
    brandId: string | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    staticId: number
    name: number
    price: number
    rate: number
    count: number
    pathImg: number
    typeId: number
    brandId: number
    _all: number
  }


  export type DeviceAvgAggregateInputType = {
    staticId?: true
    rate?: true
    count?: true
  }

  export type DeviceSumAggregateInputType = {
    staticId?: true
    rate?: true
    count?: true
  }

  export type DeviceMinAggregateInputType = {
    id?: true
    staticId?: true
    name?: true
    price?: true
    rate?: true
    count?: true
    pathImg?: true
    typeId?: true
    brandId?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    staticId?: true
    name?: true
    price?: true
    rate?: true
    count?: true
    pathImg?: true
    typeId?: true
    brandId?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    staticId?: true
    name?: true
    price?: true
    rate?: true
    count?: true
    pathImg?: true
    typeId?: true
    brandId?: true
    _all?: true
  }

  export type DeviceAggregateArgs = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs = {
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithAggregationInput>
    by: DeviceScalarFieldEnum[]
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _avg?: DeviceAvgAggregateInputType
    _sum?: DeviceSumAggregateInputType
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }


  export type DeviceGroupByOutputType = {
    id: string
    staticId: number | null
    name: string
    price: string
    rate: number | null
    count: number
    pathImg: string | null
    typeId: string | null
    brandId: string | null
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect = {
    id?: boolean
    staticId?: boolean
    name?: boolean
    price?: boolean
    rate?: boolean
    count?: boolean
    pathImg?: boolean
    typeId?: boolean
    brandId?: boolean
    devices?: boolean | Device$devicesArgs
    deviceInfo?: boolean | Device$deviceInfoArgs
    rating?: boolean | Device$ratingArgs
    type?: boolean | TypeArgs
    brand?: boolean | BrandArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }


  export type DeviceInclude = {
    devices?: boolean | Device$devicesArgs
    deviceInfo?: boolean | Device$deviceInfoArgs
    rating?: boolean | Device$ratingArgs
    type?: boolean | TypeArgs
    brand?: boolean | BrandArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }

  export type DeviceGetPayload<S extends boolean | null | undefined | DeviceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Device :
    S extends undefined ? never :
    S extends { include: any } & (DeviceArgs | DeviceFindManyArgs)
    ? Device  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'devices' ? Array < BasketDeviceGetPayload<S['include'][P]>>  :
        P extends 'deviceInfo' ? Array < DeviceInfoGetPayload<S['include'][P]>>  :
        P extends 'rating' ? Array < RatingGetPayload<S['include'][P]>>  :
        P extends 'type' ? TypeGetPayload<S['include'][P]> | null :
        P extends 'brand' ? BrandGetPayload<S['include'][P]> | null :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DeviceArgs | DeviceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'devices' ? Array < BasketDeviceGetPayload<S['select'][P]>>  :
        P extends 'deviceInfo' ? Array < DeviceInfoGetPayload<S['select'][P]>>  :
        P extends 'rating' ? Array < RatingGetPayload<S['select'][P]>>  :
        P extends 'type' ? TypeGetPayload<S['select'][P]> | null :
        P extends 'brand' ? BrandGetPayload<S['select'][P]> | null :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Device ? Device[P] : never
  } 
      : Device


  type DeviceCountArgs = 
    Omit<DeviceFindManyArgs, 'select' | 'include'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Device'> extends True ? Prisma__DeviceClient<DeviceGetPayload<T>> : Prisma__DeviceClient<DeviceGetPayload<T> | null, null>

    /**
     * Find one Device that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DeviceFindUniqueOrThrowArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Device'> extends True ? Prisma__DeviceClient<DeviceGetPayload<T>> : Prisma__DeviceClient<DeviceGetPayload<T> | null, null>

    /**
     * Find the first Device that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DeviceFindFirstOrThrowArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeviceFindManyArgs>(
      args?: SelectSubset<T, DeviceFindManyArgs>
    ): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
    **/
    create<T extends DeviceCreateArgs>(
      args: SelectSubset<T, DeviceCreateArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Create many Devices.
     *     @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const device = await prisma.device.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeviceCreateManyArgs>(
      args?: SelectSubset<T, DeviceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
    **/
    delete<T extends DeviceDeleteArgs>(
      args: SelectSubset<T, DeviceDeleteArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeviceUpdateArgs>(
      args: SelectSubset<T, DeviceUpdateArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeviceDeleteManyArgs>(
      args?: SelectSubset<T, DeviceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeviceUpdateManyArgs>(
      args: SelectSubset<T, DeviceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
    **/
    upsert<T extends DeviceUpsertArgs>(
      args: SelectSubset<T, DeviceUpsertArgs>
    ): Prisma__DeviceClient<DeviceGetPayload<T>>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeviceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends Device$devicesArgs= {}>(args?: Subset<T, Device$devicesArgs>): Prisma.PrismaPromise<Array<BasketDeviceGetPayload<T>>| Null>;

    deviceInfo<T extends Device$deviceInfoArgs= {}>(args?: Subset<T, Device$deviceInfoArgs>): Prisma.PrismaPromise<Array<DeviceInfoGetPayload<T>>| Null>;

    rating<T extends Device$ratingArgs= {}>(args?: Subset<T, Device$ratingArgs>): Prisma.PrismaPromise<Array<RatingGetPayload<T>>| Null>;

    type<T extends TypeArgs= {}>(args?: Subset<T, TypeArgs>): Prisma__TypeClient<TypeGetPayload<T> | Null>;

    brand<T extends BrandArgs= {}>(args?: Subset<T, BrandArgs>): Prisma__BrandClient<BrandGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Device base type for findUnique actions
   */
  export type DeviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUnique
   */
  export interface DeviceFindUniqueArgs extends DeviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device base type for findFirst actions
   */
  export type DeviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }

  /**
   * Device findFirst
   */
  export interface DeviceFindFirstArgs extends DeviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device findMany
   */
  export type DeviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Device create
   */
  export type DeviceCreateArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }


  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs = {
    /**
     * The data used to create many Devices.
     */
    data: Enumerable<DeviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Device update
   */
  export type DeviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
  }


  /**
   * Device upsert
   */
  export type DeviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }


  /**
   * Device delete
   */
  export type DeviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }


  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
  }


  /**
   * Device.devices
   */
  export type Device$devicesArgs = {
    /**
     * Select specific fields to fetch from the BasketDevice
     */
    select?: BasketDeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BasketDeviceInclude | null
    where?: BasketDeviceWhereInput
    orderBy?: Enumerable<BasketDeviceOrderByWithRelationInput>
    cursor?: BasketDeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BasketDeviceScalarFieldEnum>
  }


  /**
   * Device.deviceInfo
   */
  export type Device$deviceInfoArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    where?: DeviceInfoWhereInput
    orderBy?: Enumerable<DeviceInfoOrderByWithRelationInput>
    cursor?: DeviceInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceInfoScalarFieldEnum>
  }


  /**
   * Device.rating
   */
  export type Device$ratingArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Device without action
   */
  export type DeviceArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
  }



  /**
   * Model DeviceInfo
   */


  export type AggregateDeviceInfo = {
    _count: DeviceInfoCountAggregateOutputType | null
    _min: DeviceInfoMinAggregateOutputType | null
    _max: DeviceInfoMaxAggregateOutputType | null
  }

  export type DeviceInfoMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    title: string | null
    description: string | null
  }

  export type DeviceInfoMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    title: string | null
    description: string | null
  }

  export type DeviceInfoCountAggregateOutputType = {
    id: number
    deviceId: number
    title: number
    description: number
    _all: number
  }


  export type DeviceInfoMinAggregateInputType = {
    id?: true
    deviceId?: true
    title?: true
    description?: true
  }

  export type DeviceInfoMaxAggregateInputType = {
    id?: true
    deviceId?: true
    title?: true
    description?: true
  }

  export type DeviceInfoCountAggregateInputType = {
    id?: true
    deviceId?: true
    title?: true
    description?: true
    _all?: true
  }

  export type DeviceInfoAggregateArgs = {
    /**
     * Filter which DeviceInfo to aggregate.
     */
    where?: DeviceInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceInfos to fetch.
     */
    orderBy?: Enumerable<DeviceInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceInfos
    **/
    _count?: true | DeviceInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceInfoMaxAggregateInputType
  }

  export type GetDeviceInfoAggregateType<T extends DeviceInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceInfo[P]>
      : GetScalarType<T[P], AggregateDeviceInfo[P]>
  }




  export type DeviceInfoGroupByArgs = {
    where?: DeviceInfoWhereInput
    orderBy?: Enumerable<DeviceInfoOrderByWithAggregationInput>
    by: DeviceInfoScalarFieldEnum[]
    having?: DeviceInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceInfoCountAggregateInputType | true
    _min?: DeviceInfoMinAggregateInputType
    _max?: DeviceInfoMaxAggregateInputType
  }


  export type DeviceInfoGroupByOutputType = {
    id: string
    deviceId: string
    title: string
    description: string
    _count: DeviceInfoCountAggregateOutputType | null
    _min: DeviceInfoMinAggregateOutputType | null
    _max: DeviceInfoMaxAggregateOutputType | null
  }

  type GetDeviceInfoGroupByPayload<T extends DeviceInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeviceInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceInfoGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceInfoGroupByOutputType[P]>
        }
      >
    >


  export type DeviceInfoSelect = {
    id?: boolean
    deviceId?: boolean
    title?: boolean
    description?: boolean
    device?: boolean | DeviceArgs
  }


  export type DeviceInfoInclude = {
    device?: boolean | DeviceArgs
  }

  export type DeviceInfoGetPayload<S extends boolean | null | undefined | DeviceInfoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DeviceInfo :
    S extends undefined ? never :
    S extends { include: any } & (DeviceInfoArgs | DeviceInfoFindManyArgs)
    ? DeviceInfo  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'device' ? DeviceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DeviceInfoArgs | DeviceInfoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'device' ? DeviceGetPayload<S['select'][P]> :  P extends keyof DeviceInfo ? DeviceInfo[P] : never
  } 
      : DeviceInfo


  type DeviceInfoCountArgs = 
    Omit<DeviceInfoFindManyArgs, 'select' | 'include'> & {
      select?: DeviceInfoCountAggregateInputType | true
    }

  export interface DeviceInfoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one DeviceInfo that matches the filter.
     * @param {DeviceInfoFindUniqueArgs} args - Arguments to find a DeviceInfo
     * @example
     * // Get one DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeviceInfoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeviceInfoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DeviceInfo'> extends True ? Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>> : Prisma__DeviceInfoClient<DeviceInfoGetPayload<T> | null, null>

    /**
     * Find one DeviceInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeviceInfoFindUniqueOrThrowArgs} args - Arguments to find a DeviceInfo
     * @example
     * // Get one DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeviceInfoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DeviceInfoFindUniqueOrThrowArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Find the first DeviceInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoFindFirstArgs} args - Arguments to find a DeviceInfo
     * @example
     * // Get one DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeviceInfoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeviceInfoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DeviceInfo'> extends True ? Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>> : Prisma__DeviceInfoClient<DeviceInfoGetPayload<T> | null, null>

    /**
     * Find the first DeviceInfo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoFindFirstOrThrowArgs} args - Arguments to find a DeviceInfo
     * @example
     * // Get one DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeviceInfoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DeviceInfoFindFirstOrThrowArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Find zero or more DeviceInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceInfos
     * const deviceInfos = await prisma.deviceInfo.findMany()
     * 
     * // Get first 10 DeviceInfos
     * const deviceInfos = await prisma.deviceInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceInfoWithIdOnly = await prisma.deviceInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeviceInfoFindManyArgs>(
      args?: SelectSubset<T, DeviceInfoFindManyArgs>
    ): Prisma.PrismaPromise<Array<DeviceInfoGetPayload<T>>>

    /**
     * Create a DeviceInfo.
     * @param {DeviceInfoCreateArgs} args - Arguments to create a DeviceInfo.
     * @example
     * // Create one DeviceInfo
     * const DeviceInfo = await prisma.deviceInfo.create({
     *   data: {
     *     // ... data to create a DeviceInfo
     *   }
     * })
     * 
    **/
    create<T extends DeviceInfoCreateArgs>(
      args: SelectSubset<T, DeviceInfoCreateArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Create many DeviceInfos.
     *     @param {DeviceInfoCreateManyArgs} args - Arguments to create many DeviceInfos.
     *     @example
     *     // Create many DeviceInfos
     *     const deviceInfo = await prisma.deviceInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeviceInfoCreateManyArgs>(
      args?: SelectSubset<T, DeviceInfoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DeviceInfo.
     * @param {DeviceInfoDeleteArgs} args - Arguments to delete one DeviceInfo.
     * @example
     * // Delete one DeviceInfo
     * const DeviceInfo = await prisma.deviceInfo.delete({
     *   where: {
     *     // ... filter to delete one DeviceInfo
     *   }
     * })
     * 
    **/
    delete<T extends DeviceInfoDeleteArgs>(
      args: SelectSubset<T, DeviceInfoDeleteArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Update one DeviceInfo.
     * @param {DeviceInfoUpdateArgs} args - Arguments to update one DeviceInfo.
     * @example
     * // Update one DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeviceInfoUpdateArgs>(
      args: SelectSubset<T, DeviceInfoUpdateArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Delete zero or more DeviceInfos.
     * @param {DeviceInfoDeleteManyArgs} args - Arguments to filter DeviceInfos to delete.
     * @example
     * // Delete a few DeviceInfos
     * const { count } = await prisma.deviceInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeviceInfoDeleteManyArgs>(
      args?: SelectSubset<T, DeviceInfoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceInfos
     * const deviceInfo = await prisma.deviceInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeviceInfoUpdateManyArgs>(
      args: SelectSubset<T, DeviceInfoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceInfo.
     * @param {DeviceInfoUpsertArgs} args - Arguments to update or create a DeviceInfo.
     * @example
     * // Update or create a DeviceInfo
     * const deviceInfo = await prisma.deviceInfo.upsert({
     *   create: {
     *     // ... data to create a DeviceInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceInfo we want to update
     *   }
     * })
    **/
    upsert<T extends DeviceInfoUpsertArgs>(
      args: SelectSubset<T, DeviceInfoUpsertArgs>
    ): Prisma__DeviceInfoClient<DeviceInfoGetPayload<T>>

    /**
     * Count the number of DeviceInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoCountArgs} args - Arguments to filter DeviceInfos to count.
     * @example
     * // Count the number of DeviceInfos
     * const count = await prisma.deviceInfo.count({
     *   where: {
     *     // ... the filter for the DeviceInfos we want to count
     *   }
     * })
    **/
    count<T extends DeviceInfoCountArgs>(
      args?: Subset<T, DeviceInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceInfoAggregateArgs>(args: Subset<T, DeviceInfoAggregateArgs>): Prisma.PrismaPromise<GetDeviceInfoAggregateType<T>>

    /**
     * Group by DeviceInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceInfoGroupByArgs['orderBy'] }
        : { orderBy?: DeviceInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeviceInfoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends DeviceArgs= {}>(args?: Subset<T, DeviceArgs>): Prisma__DeviceClient<DeviceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DeviceInfo base type for findUnique actions
   */
  export type DeviceInfoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter, which DeviceInfo to fetch.
     */
    where: DeviceInfoWhereUniqueInput
  }

  /**
   * DeviceInfo findUnique
   */
  export interface DeviceInfoFindUniqueArgs extends DeviceInfoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeviceInfo findUniqueOrThrow
   */
  export type DeviceInfoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter, which DeviceInfo to fetch.
     */
    where: DeviceInfoWhereUniqueInput
  }


  /**
   * DeviceInfo base type for findFirst actions
   */
  export type DeviceInfoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter, which DeviceInfo to fetch.
     */
    where?: DeviceInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceInfos to fetch.
     */
    orderBy?: Enumerable<DeviceInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceInfos.
     */
    cursor?: DeviceInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceInfos.
     */
    distinct?: Enumerable<DeviceInfoScalarFieldEnum>
  }

  /**
   * DeviceInfo findFirst
   */
  export interface DeviceInfoFindFirstArgs extends DeviceInfoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeviceInfo findFirstOrThrow
   */
  export type DeviceInfoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter, which DeviceInfo to fetch.
     */
    where?: DeviceInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceInfos to fetch.
     */
    orderBy?: Enumerable<DeviceInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceInfos.
     */
    cursor?: DeviceInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceInfos.
     */
    distinct?: Enumerable<DeviceInfoScalarFieldEnum>
  }


  /**
   * DeviceInfo findMany
   */
  export type DeviceInfoFindManyArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter, which DeviceInfos to fetch.
     */
    where?: DeviceInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceInfos to fetch.
     */
    orderBy?: Enumerable<DeviceInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceInfos.
     */
    cursor?: DeviceInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceInfos.
     */
    skip?: number
    distinct?: Enumerable<DeviceInfoScalarFieldEnum>
  }


  /**
   * DeviceInfo create
   */
  export type DeviceInfoCreateArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * The data needed to create a DeviceInfo.
     */
    data: XOR<DeviceInfoCreateInput, DeviceInfoUncheckedCreateInput>
  }


  /**
   * DeviceInfo createMany
   */
  export type DeviceInfoCreateManyArgs = {
    /**
     * The data used to create many DeviceInfos.
     */
    data: Enumerable<DeviceInfoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DeviceInfo update
   */
  export type DeviceInfoUpdateArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * The data needed to update a DeviceInfo.
     */
    data: XOR<DeviceInfoUpdateInput, DeviceInfoUncheckedUpdateInput>
    /**
     * Choose, which DeviceInfo to update.
     */
    where: DeviceInfoWhereUniqueInput
  }


  /**
   * DeviceInfo updateMany
   */
  export type DeviceInfoUpdateManyArgs = {
    /**
     * The data used to update DeviceInfos.
     */
    data: XOR<DeviceInfoUpdateManyMutationInput, DeviceInfoUncheckedUpdateManyInput>
    /**
     * Filter which DeviceInfos to update
     */
    where?: DeviceInfoWhereInput
  }


  /**
   * DeviceInfo upsert
   */
  export type DeviceInfoUpsertArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * The filter to search for the DeviceInfo to update in case it exists.
     */
    where: DeviceInfoWhereUniqueInput
    /**
     * In case the DeviceInfo found by the `where` argument doesn't exist, create a new DeviceInfo with this data.
     */
    create: XOR<DeviceInfoCreateInput, DeviceInfoUncheckedCreateInput>
    /**
     * In case the DeviceInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceInfoUpdateInput, DeviceInfoUncheckedUpdateInput>
  }


  /**
   * DeviceInfo delete
   */
  export type DeviceInfoDeleteArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
    /**
     * Filter which DeviceInfo to delete.
     */
    where: DeviceInfoWhereUniqueInput
  }


  /**
   * DeviceInfo deleteMany
   */
  export type DeviceInfoDeleteManyArgs = {
    /**
     * Filter which DeviceInfos to delete
     */
    where?: DeviceInfoWhereInput
  }


  /**
   * DeviceInfo without action
   */
  export type DeviceInfoArgs = {
    /**
     * Select specific fields to fetch from the DeviceInfo
     */
    select?: DeviceInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInfoInclude | null
  }



  /**
   * Model Rating
   */


  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    rate: number | null
  }

  export type RatingSumAggregateOutputType = {
    rate: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    rate: number | null
    userId: string | null
    deviceId: string | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    rate: number | null
    userId: string | null
    deviceId: string | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    rate: number
    userId: number
    deviceId: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    rate?: true
  }

  export type RatingSumAggregateInputType = {
    rate?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    rate?: true
    userId?: true
    deviceId?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    rate?: true
    userId?: true
    deviceId?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    rate?: true
    userId?: true
    deviceId?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs = {
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithAggregationInput>
    by: RatingScalarFieldEnum[]
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }


  export type RatingGroupByOutputType = {
    id: string
    rate: number
    userId: string
    deviceId: string
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect = {
    id?: boolean
    rate?: boolean
    userId?: boolean
    deviceId?: boolean
    user?: boolean | UserArgs
    device?: boolean | DeviceArgs
  }


  export type RatingInclude = {
    user?: boolean | UserArgs
    device?: boolean | DeviceArgs
  }

  export type RatingGetPayload<S extends boolean | null | undefined | RatingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Rating :
    S extends undefined ? never :
    S extends { include: any } & (RatingArgs | RatingFindManyArgs)
    ? Rating  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'device' ? DeviceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RatingArgs | RatingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'device' ? DeviceGetPayload<S['select'][P]> :  P extends keyof Rating ? Rating[P] : never
  } 
      : Rating


  type RatingCountArgs = 
    Omit<RatingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RatingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rating'> extends True ? Prisma__RatingClient<RatingGetPayload<T>> : Prisma__RatingClient<RatingGetPayload<T> | null, null>

    /**
     * Find one Rating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RatingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rating'> extends True ? Prisma__RatingClient<RatingGetPayload<T>> : Prisma__RatingClient<RatingGetPayload<T> | null, null>

    /**
     * Find the first Rating that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs>(
      args?: SelectSubset<T, RatingFindManyArgs>
    ): Prisma.PrismaPromise<Array<RatingGetPayload<T>>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs>(
      args: SelectSubset<T, RatingCreateArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs>(
      args?: SelectSubset<T, RatingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs>(
      args: SelectSubset<T, RatingDeleteArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs>(
      args: SelectSubset<T, RatingUpdateArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs>(
      args?: SelectSubset<T, RatingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs>(
      args: SelectSubset<T, RatingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs>(
      args: SelectSubset<T, RatingUpsertArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RatingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    device<T extends DeviceArgs= {}>(args?: Subset<T, DeviceArgs>): Prisma__DeviceClient<DeviceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rating base type for findUnique actions
   */
  export type RatingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUnique
   */
  export interface RatingFindUniqueArgs extends RatingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating base type for findFirst actions
   */
  export type RatingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: Enumerable<RatingScalarFieldEnum>
  }

  /**
   * Rating findFirst
   */
  export interface RatingFindFirstArgs extends RatingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Rating findMany
   */
  export type RatingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs = {
    /**
     * The data used to create many Ratings.
     */
    data: Enumerable<RatingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }


  /**
   * Rating without action
   */
  export type RatingArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
  }



  /**
   * Model Type
   */


  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TypeAggregateArgs = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs = {
    where?: TypeWhereInput
    orderBy?: Enumerable<TypeOrderByWithAggregationInput>
    by: TypeScalarFieldEnum[]
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }


  export type TypeGroupByOutputType = {
    id: string
    name: string
    _count: TypeCountAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect = {
    id?: boolean
    name?: boolean
    device?: boolean | Type$deviceArgs
    brand?: boolean | Type$brandArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }


  export type TypeInclude = {
    device?: boolean | Type$deviceArgs
    brand?: boolean | Type$brandArgs
    _count?: boolean | TypeCountOutputTypeArgs
  }

  export type TypeGetPayload<S extends boolean | null | undefined | TypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Type :
    S extends undefined ? never :
    S extends { include: any } & (TypeArgs | TypeFindManyArgs)
    ? Type  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'device' ? Array < DeviceGetPayload<S['include'][P]>>  :
        P extends 'brand' ? Array < TypeBrandGetPayload<S['include'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TypeArgs | TypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'device' ? Array < DeviceGetPayload<S['select'][P]>>  :
        P extends 'brand' ? Array < TypeBrandGetPayload<S['select'][P]>>  :
        P extends '_count' ? TypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Type ? Type[P] : never
  } 
      : Type


  type TypeCountArgs = 
    Omit<TypeFindManyArgs, 'select' | 'include'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Type'> extends True ? Prisma__TypeClient<TypeGetPayload<T>> : Prisma__TypeClient<TypeGetPayload<T> | null, null>

    /**
     * Find the first Type that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs>(
      args?: SelectSubset<T, TypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<TypeGetPayload<T>>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs>(
      args: SelectSubset<T, TypeCreateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Create many Types.
     *     @param {TypeCreateManyArgs} args - Arguments to create many Types.
     *     @example
     *     // Create many Types
     *     const type = await prisma.type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeCreateManyArgs>(
      args?: SelectSubset<T, TypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs>(
      args: SelectSubset<T, TypeDeleteArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs>(
      args: SelectSubset<T, TypeUpdateArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs>(
      args?: SelectSubset<T, TypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs>(
      args: SelectSubset<T, TypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs>(
      args: SelectSubset<T, TypeUpsertArgs>
    ): Prisma__TypeClient<TypeGetPayload<T>>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends Type$deviceArgs= {}>(args?: Subset<T, Type$deviceArgs>): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>| Null>;

    brand<T extends Type$brandArgs= {}>(args?: Subset<T, Type$brandArgs>): Prisma.PrismaPromise<Array<TypeBrandGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Type base type for findUnique actions
   */
  export type TypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type findUnique
   */
  export interface TypeFindUniqueArgs extends TypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type base type for findFirst actions
   */
  export type TypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }

  /**
   * Type findFirst
   */
  export interface TypeFindFirstArgs extends TypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: Enumerable<TypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: Enumerable<TypeScalarFieldEnum>
  }


  /**
   * Type create
   */
  export type TypeCreateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type createMany
   */
  export type TypeCreateManyArgs = {
    /**
     * The data used to create many Types.
     */
    data: Enumerable<TypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.device
   */
  export type Type$deviceArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Type.brand
   */
  export type Type$brandArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    where?: TypeBrandWhereInput
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    cursor?: TypeBrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TypeBrandScalarFieldEnum>
  }


  /**
   * Type without action
   */
  export type TypeArgs = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude | null
  }



  /**
   * Model Brand
   */


  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BrandAggregateArgs = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: Enumerable<BrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs = {
    where?: BrandWhereInput
    orderBy?: Enumerable<BrandOrderByWithAggregationInput>
    by: BrandScalarFieldEnum[]
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }


  export type BrandGroupByOutputType = {
    id: string
    name: string
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect = {
    id?: boolean
    name?: boolean
    device?: boolean | Brand$deviceArgs
    type?: boolean | Brand$typeArgs
    _count?: boolean | BrandCountOutputTypeArgs
  }


  export type BrandInclude = {
    device?: boolean | Brand$deviceArgs
    type?: boolean | Brand$typeArgs
    _count?: boolean | BrandCountOutputTypeArgs
  }

  export type BrandGetPayload<S extends boolean | null | undefined | BrandArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Brand :
    S extends undefined ? never :
    S extends { include: any } & (BrandArgs | BrandFindManyArgs)
    ? Brand  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'device' ? Array < DeviceGetPayload<S['include'][P]>>  :
        P extends 'type' ? Array < TypeBrandGetPayload<S['include'][P]>>  :
        P extends '_count' ? BrandCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BrandArgs | BrandFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'device' ? Array < DeviceGetPayload<S['select'][P]>>  :
        P extends 'type' ? Array < TypeBrandGetPayload<S['select'][P]>>  :
        P extends '_count' ? BrandCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Brand ? Brand[P] : never
  } 
      : Brand


  type BrandCountArgs = 
    Omit<BrandFindManyArgs, 'select' | 'include'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BrandFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BrandFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Brand'> extends True ? Prisma__BrandClient<BrandGetPayload<T>> : Prisma__BrandClient<BrandGetPayload<T> | null, null>

    /**
     * Find one Brand that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BrandFindUniqueOrThrowArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BrandFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BrandFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Brand'> extends True ? Prisma__BrandClient<BrandGetPayload<T>> : Prisma__BrandClient<BrandGetPayload<T> | null, null>

    /**
     * Find the first Brand that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BrandFindFirstOrThrowArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BrandFindManyArgs>(
      args?: SelectSubset<T, BrandFindManyArgs>
    ): Prisma.PrismaPromise<Array<BrandGetPayload<T>>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
    **/
    create<T extends BrandCreateArgs>(
      args: SelectSubset<T, BrandCreateArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Create many Brands.
     *     @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     *     @example
     *     // Create many Brands
     *     const brand = await prisma.brand.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BrandCreateManyArgs>(
      args?: SelectSubset<T, BrandCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
    **/
    delete<T extends BrandDeleteArgs>(
      args: SelectSubset<T, BrandDeleteArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BrandUpdateArgs>(
      args: SelectSubset<T, BrandUpdateArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BrandDeleteManyArgs>(
      args?: SelectSubset<T, BrandDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BrandUpdateManyArgs>(
      args: SelectSubset<T, BrandUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
    **/
    upsert<T extends BrandUpsertArgs>(
      args: SelectSubset<T, BrandUpsertArgs>
    ): Prisma__BrandClient<BrandGetPayload<T>>

    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BrandClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    device<T extends Brand$deviceArgs= {}>(args?: Subset<T, Brand$deviceArgs>): Prisma.PrismaPromise<Array<DeviceGetPayload<T>>| Null>;

    type<T extends Brand$typeArgs= {}>(args?: Subset<T, Brand$typeArgs>): Prisma.PrismaPromise<Array<TypeBrandGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Brand base type for findUnique actions
   */
  export type BrandFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUnique
   */
  export interface BrandFindUniqueArgs extends BrandFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }


  /**
   * Brand base type for findFirst actions
   */
  export type BrandFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: Enumerable<BrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: Enumerable<BrandScalarFieldEnum>
  }

  /**
   * Brand findFirst
   */
  export interface BrandFindFirstArgs extends BrandFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: Enumerable<BrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: Enumerable<BrandScalarFieldEnum>
  }


  /**
   * Brand findMany
   */
  export type BrandFindManyArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: Enumerable<BrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: Enumerable<BrandScalarFieldEnum>
  }


  /**
   * Brand create
   */
  export type BrandCreateArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }


  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs = {
    /**
     * The data used to create many Brands.
     */
    data: Enumerable<BrandCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Brand update
   */
  export type BrandUpdateArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }


  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
  }


  /**
   * Brand upsert
   */
  export type BrandUpsertArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }


  /**
   * Brand delete
   */
  export type BrandDeleteArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }


  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
  }


  /**
   * Brand.device
   */
  export type Brand$deviceArgs = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DeviceInclude | null
    where?: DeviceWhereInput
    orderBy?: Enumerable<DeviceOrderByWithRelationInput>
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * Brand.type
   */
  export type Brand$typeArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    where?: TypeBrandWhereInput
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    cursor?: TypeBrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TypeBrandScalarFieldEnum>
  }


  /**
   * Brand without action
   */
  export type BrandArgs = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BrandInclude | null
  }



  /**
   * Model TypeBrand
   */


  export type AggregateTypeBrand = {
    _count: TypeBrandCountAggregateOutputType | null
    _min: TypeBrandMinAggregateOutputType | null
    _max: TypeBrandMaxAggregateOutputType | null
  }

  export type TypeBrandMinAggregateOutputType = {
    id: string | null
    typeId: string | null
    brandId: string | null
  }

  export type TypeBrandMaxAggregateOutputType = {
    id: string | null
    typeId: string | null
    brandId: string | null
  }

  export type TypeBrandCountAggregateOutputType = {
    id: number
    typeId: number
    brandId: number
    _all: number
  }


  export type TypeBrandMinAggregateInputType = {
    id?: true
    typeId?: true
    brandId?: true
  }

  export type TypeBrandMaxAggregateInputType = {
    id?: true
    typeId?: true
    brandId?: true
  }

  export type TypeBrandCountAggregateInputType = {
    id?: true
    typeId?: true
    brandId?: true
    _all?: true
  }

  export type TypeBrandAggregateArgs = {
    /**
     * Filter which TypeBrand to aggregate.
     */
    where?: TypeBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeBrands to fetch.
     */
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypeBrands
    **/
    _count?: true | TypeBrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeBrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeBrandMaxAggregateInputType
  }

  export type GetTypeBrandAggregateType<T extends TypeBrandAggregateArgs> = {
        [P in keyof T & keyof AggregateTypeBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypeBrand[P]>
      : GetScalarType<T[P], AggregateTypeBrand[P]>
  }




  export type TypeBrandGroupByArgs = {
    where?: TypeBrandWhereInput
    orderBy?: Enumerable<TypeBrandOrderByWithAggregationInput>
    by: TypeBrandScalarFieldEnum[]
    having?: TypeBrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeBrandCountAggregateInputType | true
    _min?: TypeBrandMinAggregateInputType
    _max?: TypeBrandMaxAggregateInputType
  }


  export type TypeBrandGroupByOutputType = {
    id: string
    typeId: string | null
    brandId: string | null
    _count: TypeBrandCountAggregateOutputType | null
    _min: TypeBrandMinAggregateOutputType | null
    _max: TypeBrandMaxAggregateOutputType | null
  }

  type GetTypeBrandGroupByPayload<T extends TypeBrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TypeBrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeBrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeBrandGroupByOutputType[P]>
            : GetScalarType<T[P], TypeBrandGroupByOutputType[P]>
        }
      >
    >


  export type TypeBrandSelect = {
    id?: boolean
    typeId?: boolean
    brandId?: boolean
    type?: boolean | TypeArgs
    brand?: boolean | BrandArgs
  }


  export type TypeBrandInclude = {
    type?: boolean | TypeArgs
    brand?: boolean | BrandArgs
  }

  export type TypeBrandGetPayload<S extends boolean | null | undefined | TypeBrandArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TypeBrand :
    S extends undefined ? never :
    S extends { include: any } & (TypeBrandArgs | TypeBrandFindManyArgs)
    ? TypeBrand  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'type' ? TypeGetPayload<S['include'][P]> | null :
        P extends 'brand' ? BrandGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (TypeBrandArgs | TypeBrandFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'type' ? TypeGetPayload<S['select'][P]> | null :
        P extends 'brand' ? BrandGetPayload<S['select'][P]> | null :  P extends keyof TypeBrand ? TypeBrand[P] : never
  } 
      : TypeBrand


  type TypeBrandCountArgs = 
    Omit<TypeBrandFindManyArgs, 'select' | 'include'> & {
      select?: TypeBrandCountAggregateInputType | true
    }

  export interface TypeBrandDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TypeBrand that matches the filter.
     * @param {TypeBrandFindUniqueArgs} args - Arguments to find a TypeBrand
     * @example
     * // Get one TypeBrand
     * const typeBrand = await prisma.typeBrand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeBrandFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TypeBrandFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TypeBrand'> extends True ? Prisma__TypeBrandClient<TypeBrandGetPayload<T>> : Prisma__TypeBrandClient<TypeBrandGetPayload<T> | null, null>

    /**
     * Find one TypeBrand that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeBrandFindUniqueOrThrowArgs} args - Arguments to find a TypeBrand
     * @example
     * // Get one TypeBrand
     * const typeBrand = await prisma.typeBrand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeBrandFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TypeBrandFindUniqueOrThrowArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Find the first TypeBrand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandFindFirstArgs} args - Arguments to find a TypeBrand
     * @example
     * // Get one TypeBrand
     * const typeBrand = await prisma.typeBrand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeBrandFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TypeBrandFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TypeBrand'> extends True ? Prisma__TypeBrandClient<TypeBrandGetPayload<T>> : Prisma__TypeBrandClient<TypeBrandGetPayload<T> | null, null>

    /**
     * Find the first TypeBrand that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandFindFirstOrThrowArgs} args - Arguments to find a TypeBrand
     * @example
     * // Get one TypeBrand
     * const typeBrand = await prisma.typeBrand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeBrandFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TypeBrandFindFirstOrThrowArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Find zero or more TypeBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypeBrands
     * const typeBrands = await prisma.typeBrand.findMany()
     * 
     * // Get first 10 TypeBrands
     * const typeBrands = await prisma.typeBrand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeBrandWithIdOnly = await prisma.typeBrand.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeBrandFindManyArgs>(
      args?: SelectSubset<T, TypeBrandFindManyArgs>
    ): Prisma.PrismaPromise<Array<TypeBrandGetPayload<T>>>

    /**
     * Create a TypeBrand.
     * @param {TypeBrandCreateArgs} args - Arguments to create a TypeBrand.
     * @example
     * // Create one TypeBrand
     * const TypeBrand = await prisma.typeBrand.create({
     *   data: {
     *     // ... data to create a TypeBrand
     *   }
     * })
     * 
    **/
    create<T extends TypeBrandCreateArgs>(
      args: SelectSubset<T, TypeBrandCreateArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Create many TypeBrands.
     *     @param {TypeBrandCreateManyArgs} args - Arguments to create many TypeBrands.
     *     @example
     *     // Create many TypeBrands
     *     const typeBrand = await prisma.typeBrand.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeBrandCreateManyArgs>(
      args?: SelectSubset<T, TypeBrandCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TypeBrand.
     * @param {TypeBrandDeleteArgs} args - Arguments to delete one TypeBrand.
     * @example
     * // Delete one TypeBrand
     * const TypeBrand = await prisma.typeBrand.delete({
     *   where: {
     *     // ... filter to delete one TypeBrand
     *   }
     * })
     * 
    **/
    delete<T extends TypeBrandDeleteArgs>(
      args: SelectSubset<T, TypeBrandDeleteArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Update one TypeBrand.
     * @param {TypeBrandUpdateArgs} args - Arguments to update one TypeBrand.
     * @example
     * // Update one TypeBrand
     * const typeBrand = await prisma.typeBrand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeBrandUpdateArgs>(
      args: SelectSubset<T, TypeBrandUpdateArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Delete zero or more TypeBrands.
     * @param {TypeBrandDeleteManyArgs} args - Arguments to filter TypeBrands to delete.
     * @example
     * // Delete a few TypeBrands
     * const { count } = await prisma.typeBrand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeBrandDeleteManyArgs>(
      args?: SelectSubset<T, TypeBrandDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypeBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypeBrands
     * const typeBrand = await prisma.typeBrand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeBrandUpdateManyArgs>(
      args: SelectSubset<T, TypeBrandUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypeBrand.
     * @param {TypeBrandUpsertArgs} args - Arguments to update or create a TypeBrand.
     * @example
     * // Update or create a TypeBrand
     * const typeBrand = await prisma.typeBrand.upsert({
     *   create: {
     *     // ... data to create a TypeBrand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypeBrand we want to update
     *   }
     * })
    **/
    upsert<T extends TypeBrandUpsertArgs>(
      args: SelectSubset<T, TypeBrandUpsertArgs>
    ): Prisma__TypeBrandClient<TypeBrandGetPayload<T>>

    /**
     * Count the number of TypeBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandCountArgs} args - Arguments to filter TypeBrands to count.
     * @example
     * // Count the number of TypeBrands
     * const count = await prisma.typeBrand.count({
     *   where: {
     *     // ... the filter for the TypeBrands we want to count
     *   }
     * })
    **/
    count<T extends TypeBrandCountArgs>(
      args?: Subset<T, TypeBrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeBrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypeBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeBrandAggregateArgs>(args: Subset<T, TypeBrandAggregateArgs>): Prisma.PrismaPromise<GetTypeBrandAggregateType<T>>

    /**
     * Group by TypeBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeBrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeBrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeBrandGroupByArgs['orderBy'] }
        : { orderBy?: TypeBrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeBrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TypeBrand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TypeBrandClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    type<T extends TypeArgs= {}>(args?: Subset<T, TypeArgs>): Prisma__TypeClient<TypeGetPayload<T> | Null>;

    brand<T extends BrandArgs= {}>(args?: Subset<T, BrandArgs>): Prisma__BrandClient<BrandGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TypeBrand base type for findUnique actions
   */
  export type TypeBrandFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter, which TypeBrand to fetch.
     */
    where: TypeBrandWhereUniqueInput
  }

  /**
   * TypeBrand findUnique
   */
  export interface TypeBrandFindUniqueArgs extends TypeBrandFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeBrand findUniqueOrThrow
   */
  export type TypeBrandFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter, which TypeBrand to fetch.
     */
    where: TypeBrandWhereUniqueInput
  }


  /**
   * TypeBrand base type for findFirst actions
   */
  export type TypeBrandFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter, which TypeBrand to fetch.
     */
    where?: TypeBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeBrands to fetch.
     */
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeBrands.
     */
    cursor?: TypeBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeBrands.
     */
    distinct?: Enumerable<TypeBrandScalarFieldEnum>
  }

  /**
   * TypeBrand findFirst
   */
  export interface TypeBrandFindFirstArgs extends TypeBrandFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TypeBrand findFirstOrThrow
   */
  export type TypeBrandFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter, which TypeBrand to fetch.
     */
    where?: TypeBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeBrands to fetch.
     */
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeBrands.
     */
    cursor?: TypeBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeBrands.
     */
    distinct?: Enumerable<TypeBrandScalarFieldEnum>
  }


  /**
   * TypeBrand findMany
   */
  export type TypeBrandFindManyArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter, which TypeBrands to fetch.
     */
    where?: TypeBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeBrands to fetch.
     */
    orderBy?: Enumerable<TypeBrandOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypeBrands.
     */
    cursor?: TypeBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeBrands.
     */
    skip?: number
    distinct?: Enumerable<TypeBrandScalarFieldEnum>
  }


  /**
   * TypeBrand create
   */
  export type TypeBrandCreateArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * The data needed to create a TypeBrand.
     */
    data: XOR<TypeBrandCreateInput, TypeBrandUncheckedCreateInput>
  }


  /**
   * TypeBrand createMany
   */
  export type TypeBrandCreateManyArgs = {
    /**
     * The data used to create many TypeBrands.
     */
    data: Enumerable<TypeBrandCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TypeBrand update
   */
  export type TypeBrandUpdateArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * The data needed to update a TypeBrand.
     */
    data: XOR<TypeBrandUpdateInput, TypeBrandUncheckedUpdateInput>
    /**
     * Choose, which TypeBrand to update.
     */
    where: TypeBrandWhereUniqueInput
  }


  /**
   * TypeBrand updateMany
   */
  export type TypeBrandUpdateManyArgs = {
    /**
     * The data used to update TypeBrands.
     */
    data: XOR<TypeBrandUpdateManyMutationInput, TypeBrandUncheckedUpdateManyInput>
    /**
     * Filter which TypeBrands to update
     */
    where?: TypeBrandWhereInput
  }


  /**
   * TypeBrand upsert
   */
  export type TypeBrandUpsertArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * The filter to search for the TypeBrand to update in case it exists.
     */
    where: TypeBrandWhereUniqueInput
    /**
     * In case the TypeBrand found by the `where` argument doesn't exist, create a new TypeBrand with this data.
     */
    create: XOR<TypeBrandCreateInput, TypeBrandUncheckedCreateInput>
    /**
     * In case the TypeBrand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeBrandUpdateInput, TypeBrandUncheckedUpdateInput>
  }


  /**
   * TypeBrand delete
   */
  export type TypeBrandDeleteArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
    /**
     * Filter which TypeBrand to delete.
     */
    where: TypeBrandWhereUniqueInput
  }


  /**
   * TypeBrand deleteMany
   */
  export type TypeBrandDeleteManyArgs = {
    /**
     * Filter which TypeBrands to delete
     */
    where?: TypeBrandWhereInput
  }


  /**
   * TypeBrand without action
   */
  export type TypeBrandArgs = {
    /**
     * Select specific fields to fetch from the TypeBrand
     */
    select?: TypeBrandSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeBrandInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BasketDeviceScalarFieldEnum: {
    basketId: 'basketId',
    deviceId: 'deviceId'
  };

  export type BasketDeviceScalarFieldEnum = (typeof BasketDeviceScalarFieldEnum)[keyof typeof BasketDeviceScalarFieldEnum]


  export const BasketScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type BasketScalarFieldEnum = (typeof BasketScalarFieldEnum)[keyof typeof BasketScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const DeviceInfoScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    title: 'title',
    description: 'description'
  };

  export type DeviceInfoScalarFieldEnum = (typeof DeviceInfoScalarFieldEnum)[keyof typeof DeviceInfoScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    staticId: 'staticId',
    name: 'name',
    price: 'price',
    rate: 'rate',
    count: 'count',
    pathImg: 'pathImg',
    typeId: 'typeId',
    brandId: 'brandId'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RatingScalarFieldEnum: {
    id: 'id',
    rate: 'rate',
    userId: 'userId',
    deviceId: 'deviceId'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TypeBrandScalarFieldEnum: {
    id: 'id',
    typeId: 'typeId',
    brandId: 'brandId'
  };

  export type TypeBrandScalarFieldEnum = (typeof TypeBrandScalarFieldEnum)[keyof typeof TypeBrandScalarFieldEnum]


  export const TypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    username: 'username',
    password: 'password',
    photoPath: 'photoPath',
    phoneNumber: 'phoneNumber',
    isAdmin: 'isAdmin',
    role: 'role',
    permissions: 'permissions'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    surname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    photoPath?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    isAdmin?: BoolFilter | boolean
    role?: StringFilter | string
    permissions?: JsonFilter
    basket?: XOR<BasketRelationFilter, BasketWhereInput> | null
    rating?: RatingListRelationFilter
    session?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photoPath?: SortOrder
    phoneNumber?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    basket?: BasketOrderByWithRelationInput
    rating?: RatingOrderByRelationAggregateInput
    session?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    phoneNumber?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photoPath?: SortOrder
    phoneNumber?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    surname?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    photoPath?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    isAdmin?: BoolWithAggregatesFilter | boolean
    role?: StringWithAggregatesFilter | string
    permissions?: JsonWithAggregatesFilter
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    token?: StringFilter | string
    userId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    token?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    userId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type BasketWhereInput = {
    AND?: Enumerable<BasketWhereInput>
    OR?: Enumerable<BasketWhereInput>
    NOT?: Enumerable<BasketWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    basketDevice?: BasketDeviceListRelationFilter
  }

  export type BasketOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    basketDevice?: BasketDeviceOrderByRelationAggregateInput
  }

  export type BasketWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type BasketOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: BasketCountOrderByAggregateInput
    _max?: BasketMaxOrderByAggregateInput
    _min?: BasketMinOrderByAggregateInput
  }

  export type BasketScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BasketScalarWhereWithAggregatesInput>
    OR?: Enumerable<BasketScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BasketScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type BasketDeviceWhereInput = {
    AND?: Enumerable<BasketDeviceWhereInput>
    OR?: Enumerable<BasketDeviceWhereInput>
    NOT?: Enumerable<BasketDeviceWhereInput>
    basketId?: StringFilter | string
    deviceId?: StringFilter | string
    basket?: XOR<BasketRelationFilter, BasketWhereInput>
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type BasketDeviceOrderByWithRelationInput = {
    basketId?: SortOrder
    deviceId?: SortOrder
    basket?: BasketOrderByWithRelationInput
    device?: DeviceOrderByWithRelationInput
  }

  export type BasketDeviceWhereUniqueInput = {
    basketId_deviceId?: BasketDeviceBasketIdDeviceIdCompoundUniqueInput
  }

  export type BasketDeviceOrderByWithAggregationInput = {
    basketId?: SortOrder
    deviceId?: SortOrder
    _count?: BasketDeviceCountOrderByAggregateInput
    _max?: BasketDeviceMaxOrderByAggregateInput
    _min?: BasketDeviceMinOrderByAggregateInput
  }

  export type BasketDeviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BasketDeviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<BasketDeviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BasketDeviceScalarWhereWithAggregatesInput>
    basketId?: StringWithAggregatesFilter | string
    deviceId?: StringWithAggregatesFilter | string
  }

  export type DeviceWhereInput = {
    AND?: Enumerable<DeviceWhereInput>
    OR?: Enumerable<DeviceWhereInput>
    NOT?: Enumerable<DeviceWhereInput>
    id?: StringFilter | string
    staticId?: IntNullableFilter | number | null
    name?: StringFilter | string
    price?: StringFilter | string
    rate?: IntNullableFilter | number | null
    count?: IntFilter | number
    pathImg?: StringNullableFilter | string | null
    typeId?: StringNullableFilter | string | null
    brandId?: StringNullableFilter | string | null
    devices?: BasketDeviceListRelationFilter
    deviceInfo?: DeviceInfoListRelationFilter
    rating?: RatingListRelationFilter
    type?: XOR<TypeRelationFilter, TypeWhereInput> | null
    brand?: XOR<BrandRelationFilter, BrandWhereInput> | null
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    staticId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    pathImg?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
    devices?: BasketDeviceOrderByRelationAggregateInput
    deviceInfo?: DeviceInfoOrderByRelationAggregateInput
    rating?: RatingOrderByRelationAggregateInput
    type?: TypeOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
  }

  export type DeviceWhereUniqueInput = {
    id?: string
  }

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    staticId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    pathImg?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _avg?: DeviceAvgOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
    _sum?: DeviceSumOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    staticId?: IntNullableWithAggregatesFilter | number | null
    name?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    rate?: IntNullableWithAggregatesFilter | number | null
    count?: IntWithAggregatesFilter | number
    pathImg?: StringNullableWithAggregatesFilter | string | null
    typeId?: StringNullableWithAggregatesFilter | string | null
    brandId?: StringNullableWithAggregatesFilter | string | null
  }

  export type DeviceInfoWhereInput = {
    AND?: Enumerable<DeviceInfoWhereInput>
    OR?: Enumerable<DeviceInfoWhereInput>
    NOT?: Enumerable<DeviceInfoWhereInput>
    id?: StringFilter | string
    deviceId?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type DeviceInfoOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type DeviceInfoWhereUniqueInput = {
    id?: string
  }

  export type DeviceInfoOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    _count?: DeviceInfoCountOrderByAggregateInput
    _max?: DeviceInfoMaxOrderByAggregateInput
    _min?: DeviceInfoMinOrderByAggregateInput
  }

  export type DeviceInfoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeviceInfoScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeviceInfoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeviceInfoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    deviceId?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type RatingWhereInput = {
    AND?: Enumerable<RatingWhereInput>
    OR?: Enumerable<RatingWhereInput>
    NOT?: Enumerable<RatingWhereInput>
    id?: StringFilter | string
    rate?: IntFilter | number
    userId?: StringFilter | string
    deviceId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    user?: UserOrderByWithRelationInput
    device?: DeviceOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = {
    id?: string
  }

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RatingScalarWhereWithAggregatesInput>
    OR?: Enumerable<RatingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RatingScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    rate?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    deviceId?: StringWithAggregatesFilter | string
  }

  export type TypeWhereInput = {
    AND?: Enumerable<TypeWhereInput>
    OR?: Enumerable<TypeWhereInput>
    NOT?: Enumerable<TypeWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    device?: DeviceListRelationFilter
    brand?: TypeBrandListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    device?: DeviceOrderByRelationAggregateInput
    brand?: TypeBrandOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = {
    id?: string
  }

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type BrandWhereInput = {
    AND?: Enumerable<BrandWhereInput>
    OR?: Enumerable<BrandWhereInput>
    NOT?: Enumerable<BrandWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    device?: DeviceListRelationFilter
    type?: TypeBrandListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    device?: DeviceOrderByRelationAggregateInput
    type?: TypeBrandOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = {
    id?: string
  }

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BrandScalarWhereWithAggregatesInput>
    OR?: Enumerable<BrandScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BrandScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type TypeBrandWhereInput = {
    AND?: Enumerable<TypeBrandWhereInput>
    OR?: Enumerable<TypeBrandWhereInput>
    NOT?: Enumerable<TypeBrandWhereInput>
    id?: StringFilter | string
    typeId?: StringNullableFilter | string | null
    brandId?: StringNullableFilter | string | null
    type?: XOR<TypeRelationFilter, TypeWhereInput> | null
    brand?: XOR<BrandRelationFilter, BrandWhereInput> | null
  }

  export type TypeBrandOrderByWithRelationInput = {
    id?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
    type?: TypeOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
  }

  export type TypeBrandWhereUniqueInput = {
    id?: string
  }

  export type TypeBrandOrderByWithAggregationInput = {
    id?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
    _count?: TypeBrandCountOrderByAggregateInput
    _max?: TypeBrandMaxOrderByAggregateInput
    _min?: TypeBrandMinOrderByAggregateInput
  }

  export type TypeBrandScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TypeBrandScalarWhereWithAggregatesInput>
    OR?: Enumerable<TypeBrandScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TypeBrandScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    typeId?: StringNullableWithAggregatesFilter | string | null
    brandId?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketCreateNestedOneWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedCreateNestedOneWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUpdateOneWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedUpdateOneWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt?: Date | string | null
    user?: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    token: string
    userId?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    token: string
    userId?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BasketCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutBasketInput
    basketDevice?: BasketDeviceCreateNestedManyWithoutBasketInput
  }

  export type BasketUncheckedCreateInput = {
    id?: string
    userId: string
    basketDevice?: BasketDeviceUncheckedCreateNestedManyWithoutBasketInput
  }

  export type BasketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
    basketDevice?: BasketDeviceUpdateManyWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    basketDevice?: BasketDeviceUncheckedUpdateManyWithoutBasketNestedInput
  }

  export type BasketCreateManyInput = {
    id?: string
    userId: string
  }

  export type BasketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BasketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketDeviceCreateInput = {
    basket: BasketCreateNestedOneWithoutBasketDeviceInput
    device: DeviceCreateNestedOneWithoutDevicesInput
  }

  export type BasketDeviceUncheckedCreateInput = {
    basketId: string
    deviceId: string
  }

  export type BasketDeviceUpdateInput = {
    basket?: BasketUpdateOneRequiredWithoutBasketDeviceNestedInput
    device?: DeviceUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type BasketDeviceUncheckedUpdateInput = {
    basketId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketDeviceCreateManyInput = {
    basketId: string
    deviceId: string
  }

  export type BasketDeviceUpdateManyMutationInput = {

  }

  export type BasketDeviceUncheckedUpdateManyInput = {
    basketId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceCreateInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    devices?: BasketDeviceCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoCreateNestedManyWithoutDeviceInput
    rating?: RatingCreateNestedManyWithoutDeviceInput
    type?: TypeCreateNestedOneWithoutDeviceInput
    brand?: BrandCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    brandId?: string | null
    devices?: BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput
    rating?: RatingUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUpdateManyWithoutDeviceNestedInput
    rating?: RatingUpdateManyWithoutDeviceNestedInput
    type?: TypeUpdateOneWithoutDeviceNestedInput
    brand?: BrandUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    brandId?: string | null
  }

  export type DeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceInfoCreateInput = {
    id?: string
    title: string
    description: string
    device: DeviceCreateNestedOneWithoutDeviceInfoInput
  }

  export type DeviceInfoUncheckedCreateInput = {
    id?: string
    deviceId: string
    title: string
    description: string
  }

  export type DeviceInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateOneRequiredWithoutDeviceInfoNestedInput
  }

  export type DeviceInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceInfoCreateManyInput = {
    id?: string
    deviceId: string
    title: string
    description: string
  }

  export type DeviceInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateInput = {
    id?: string
    rate: number
    user: UserCreateNestedOneWithoutRatingInput
    device: DeviceCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    rate: number
    userId: string
    deviceId: string
  }

  export type RatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
    device?: DeviceUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateManyInput = {
    id?: string
    rate: number
    userId: string
    deviceId: string
  }

  export type RatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type TypeCreateInput = {
    id?: string
    name: string
    device?: DeviceCreateNestedManyWithoutTypeInput
    brand?: TypeBrandCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: string
    name: string
    device?: DeviceUncheckedCreateNestedManyWithoutTypeInput
    brand?: TypeBrandUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateManyWithoutTypeNestedInput
    brand?: TypeBrandUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUncheckedUpdateManyWithoutTypeNestedInput
    brand?: TypeBrandUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    id?: string
    name: string
  }

  export type TypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandCreateInput = {
    id?: string
    name: string
    device?: DeviceCreateNestedManyWithoutBrandInput
    type?: TypeBrandCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    name: string
    device?: DeviceUncheckedCreateNestedManyWithoutBrandInput
    type?: TypeBrandUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateManyWithoutBrandNestedInput
    type?: TypeBrandUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUncheckedUpdateManyWithoutBrandNestedInput
    type?: TypeBrandUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    name: string
  }

  export type BrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TypeBrandCreateInput = {
    id?: string
    type?: TypeCreateNestedOneWithoutBrandInput
    brand?: BrandCreateNestedOneWithoutTypeInput
  }

  export type TypeBrandUncheckedCreateInput = {
    id?: string
    typeId?: string | null
    brandId?: string | null
  }

  export type TypeBrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutBrandNestedInput
    brand?: BrandUpdateOneWithoutTypeNestedInput
  }

  export type TypeBrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeBrandCreateManyInput = {
    id?: string
    typeId?: string | null
    brandId?: string | null
  }

  export type TypeBrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TypeBrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type BasketRelationFilter = {
    is?: BasketWhereInput
    isNot?: BasketWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photoPath?: SortOrder
    phoneNumber?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photoPath?: SortOrder
    phoneNumber?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    username?: SortOrder
    password?: SortOrder
    photoPath?: SortOrder
    phoneNumber?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BasketDeviceListRelationFilter = {
    every?: BasketDeviceWhereInput
    some?: BasketDeviceWhereInput
    none?: BasketDeviceWhereInput
  }

  export type BasketDeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BasketCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BasketMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BasketMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DeviceRelationFilter = {
    is?: DeviceWhereInput
    isNot?: DeviceWhereInput
  }

  export type BasketDeviceBasketIdDeviceIdCompoundUniqueInput = {
    basketId: string
    deviceId: string
  }

  export type BasketDeviceCountOrderByAggregateInput = {
    basketId?: SortOrder
    deviceId?: SortOrder
  }

  export type BasketDeviceMaxOrderByAggregateInput = {
    basketId?: SortOrder
    deviceId?: SortOrder
  }

  export type BasketDeviceMinOrderByAggregateInput = {
    basketId?: SortOrder
    deviceId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DeviceInfoListRelationFilter = {
    every?: DeviceInfoWhereInput
    some?: DeviceInfoWhereInput
    none?: DeviceInfoWhereInput
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput | null
    isNot?: TypeWhereInput | null
  }

  export type BrandRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type DeviceInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    staticId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    pathImg?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type DeviceAvgOrderByAggregateInput = {
    staticId?: SortOrder
    rate?: SortOrder
    count?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    staticId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    pathImg?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    staticId?: SortOrder
    name?: SortOrder
    price?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    pathImg?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type DeviceSumOrderByAggregateInput = {
    staticId?: SortOrder
    rate?: SortOrder
    count?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DeviceInfoCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type DeviceInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type DeviceInfoMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    userId?: SortOrder
    deviceId?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type DeviceListRelationFilter = {
    every?: DeviceWhereInput
    some?: DeviceWhereInput
    none?: DeviceWhereInput
  }

  export type TypeBrandListRelationFilter = {
    every?: TypeBrandWhereInput
    some?: TypeBrandWhereInput
    none?: TypeBrandWhereInput
  }

  export type DeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypeBrandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TypeBrandCountOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type TypeBrandMaxOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type TypeBrandMinOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    brandId?: SortOrder
  }

  export type BasketCreateNestedOneWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput
    connect?: BasketWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type BasketUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput
    connect?: BasketWhereUniqueInput
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BasketUpdateOneWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput
    upsert?: BasketUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: BasketWhereUniqueInput
    update?: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type BasketUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput
    upsert?: BasketUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: BasketWhereUniqueInput
    update?: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutBasketInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    connect?: UserWhereUniqueInput
  }

  export type BasketDeviceCreateNestedManyWithoutBasketInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutBasketInput>, Enumerable<BasketDeviceUncheckedCreateWithoutBasketInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutBasketInput>
    createMany?: BasketDeviceCreateManyBasketInputEnvelope
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
  }

  export type BasketDeviceUncheckedCreateNestedManyWithoutBasketInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutBasketInput>, Enumerable<BasketDeviceUncheckedCreateWithoutBasketInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutBasketInput>
    createMany?: BasketDeviceCreateManyBasketInputEnvelope
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutBasketNestedInput = {
    create?: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketInput
    upsert?: UserUpsertWithoutBasketInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
  }

  export type BasketDeviceUpdateManyWithoutBasketNestedInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutBasketInput>, Enumerable<BasketDeviceUncheckedCreateWithoutBasketInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutBasketInput>
    upsert?: Enumerable<BasketDeviceUpsertWithWhereUniqueWithoutBasketInput>
    createMany?: BasketDeviceCreateManyBasketInputEnvelope
    set?: Enumerable<BasketDeviceWhereUniqueInput>
    disconnect?: Enumerable<BasketDeviceWhereUniqueInput>
    delete?: Enumerable<BasketDeviceWhereUniqueInput>
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
    update?: Enumerable<BasketDeviceUpdateWithWhereUniqueWithoutBasketInput>
    updateMany?: Enumerable<BasketDeviceUpdateManyWithWhereWithoutBasketInput>
    deleteMany?: Enumerable<BasketDeviceScalarWhereInput>
  }

  export type BasketDeviceUncheckedUpdateManyWithoutBasketNestedInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutBasketInput>, Enumerable<BasketDeviceUncheckedCreateWithoutBasketInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutBasketInput>
    upsert?: Enumerable<BasketDeviceUpsertWithWhereUniqueWithoutBasketInput>
    createMany?: BasketDeviceCreateManyBasketInputEnvelope
    set?: Enumerable<BasketDeviceWhereUniqueInput>
    disconnect?: Enumerable<BasketDeviceWhereUniqueInput>
    delete?: Enumerable<BasketDeviceWhereUniqueInput>
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
    update?: Enumerable<BasketDeviceUpdateWithWhereUniqueWithoutBasketInput>
    updateMany?: Enumerable<BasketDeviceUpdateManyWithWhereWithoutBasketInput>
    deleteMany?: Enumerable<BasketDeviceScalarWhereInput>
  }

  export type BasketCreateNestedOneWithoutBasketDeviceInput = {
    create?: XOR<BasketCreateWithoutBasketDeviceInput, BasketUncheckedCreateWithoutBasketDeviceInput>
    connectOrCreate?: BasketCreateOrConnectWithoutBasketDeviceInput
    connect?: BasketWhereUniqueInput
  }

  export type DeviceCreateNestedOneWithoutDevicesInput = {
    create?: XOR<DeviceCreateWithoutDevicesInput, DeviceUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDevicesInput
    connect?: DeviceWhereUniqueInput
  }

  export type BasketUpdateOneRequiredWithoutBasketDeviceNestedInput = {
    create?: XOR<BasketCreateWithoutBasketDeviceInput, BasketUncheckedCreateWithoutBasketDeviceInput>
    connectOrCreate?: BasketCreateOrConnectWithoutBasketDeviceInput
    upsert?: BasketUpsertWithoutBasketDeviceInput
    connect?: BasketWhereUniqueInput
    update?: XOR<BasketUpdateWithoutBasketDeviceInput, BasketUncheckedUpdateWithoutBasketDeviceInput>
  }

  export type DeviceUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<DeviceCreateWithoutDevicesInput, DeviceUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDevicesInput
    upsert?: DeviceUpsertWithoutDevicesInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutDevicesInput, DeviceUncheckedUpdateWithoutDevicesInput>
  }

  export type BasketDeviceCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutDeviceInput>, Enumerable<BasketDeviceUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutDeviceInput>
    createMany?: BasketDeviceCreateManyDeviceInputEnvelope
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
  }

  export type DeviceInfoCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<DeviceInfoCreateWithoutDeviceInput>, Enumerable<DeviceInfoUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceInfoCreateOrConnectWithoutDeviceInput>
    createMany?: DeviceInfoCreateManyDeviceInputEnvelope
    connect?: Enumerable<DeviceInfoWhereUniqueInput>
  }

  export type RatingCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<RatingCreateWithoutDeviceInput>, Enumerable<RatingUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutDeviceInput>
    createMany?: RatingCreateManyDeviceInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type TypeCreateNestedOneWithoutDeviceInput = {
    create?: XOR<TypeCreateWithoutDeviceInput, TypeUncheckedCreateWithoutDeviceInput>
    connectOrCreate?: TypeCreateOrConnectWithoutDeviceInput
    connect?: TypeWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutDeviceInput = {
    create?: XOR<BrandCreateWithoutDeviceInput, BrandUncheckedCreateWithoutDeviceInput>
    connectOrCreate?: BrandCreateOrConnectWithoutDeviceInput
    connect?: BrandWhereUniqueInput
  }

  export type BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutDeviceInput>, Enumerable<BasketDeviceUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutDeviceInput>
    createMany?: BasketDeviceCreateManyDeviceInputEnvelope
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
  }

  export type DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<DeviceInfoCreateWithoutDeviceInput>, Enumerable<DeviceInfoUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceInfoCreateOrConnectWithoutDeviceInput>
    createMany?: DeviceInfoCreateManyDeviceInputEnvelope
    connect?: Enumerable<DeviceInfoWhereUniqueInput>
  }

  export type RatingUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<RatingCreateWithoutDeviceInput>, Enumerable<RatingUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutDeviceInput>
    createMany?: RatingCreateManyDeviceInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BasketDeviceUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutDeviceInput>, Enumerable<BasketDeviceUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<BasketDeviceUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: BasketDeviceCreateManyDeviceInputEnvelope
    set?: Enumerable<BasketDeviceWhereUniqueInput>
    disconnect?: Enumerable<BasketDeviceWhereUniqueInput>
    delete?: Enumerable<BasketDeviceWhereUniqueInput>
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
    update?: Enumerable<BasketDeviceUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<BasketDeviceUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<BasketDeviceScalarWhereInput>
  }

  export type DeviceInfoUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<DeviceInfoCreateWithoutDeviceInput>, Enumerable<DeviceInfoUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceInfoCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<DeviceInfoUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: DeviceInfoCreateManyDeviceInputEnvelope
    set?: Enumerable<DeviceInfoWhereUniqueInput>
    disconnect?: Enumerable<DeviceInfoWhereUniqueInput>
    delete?: Enumerable<DeviceInfoWhereUniqueInput>
    connect?: Enumerable<DeviceInfoWhereUniqueInput>
    update?: Enumerable<DeviceInfoUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<DeviceInfoUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<DeviceInfoScalarWhereInput>
  }

  export type RatingUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutDeviceInput>, Enumerable<RatingUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: RatingCreateManyDeviceInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type TypeUpdateOneWithoutDeviceNestedInput = {
    create?: XOR<TypeCreateWithoutDeviceInput, TypeUncheckedCreateWithoutDeviceInput>
    connectOrCreate?: TypeCreateOrConnectWithoutDeviceInput
    upsert?: TypeUpsertWithoutDeviceInput
    disconnect?: boolean
    delete?: boolean
    connect?: TypeWhereUniqueInput
    update?: XOR<TypeUpdateWithoutDeviceInput, TypeUncheckedUpdateWithoutDeviceInput>
  }

  export type BrandUpdateOneWithoutDeviceNestedInput = {
    create?: XOR<BrandCreateWithoutDeviceInput, BrandUncheckedCreateWithoutDeviceInput>
    connectOrCreate?: BrandCreateOrConnectWithoutDeviceInput
    upsert?: BrandUpsertWithoutDeviceInput
    disconnect?: boolean
    delete?: boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<BrandUpdateWithoutDeviceInput, BrandUncheckedUpdateWithoutDeviceInput>
  }

  export type BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<BasketDeviceCreateWithoutDeviceInput>, Enumerable<BasketDeviceUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<BasketDeviceCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<BasketDeviceUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: BasketDeviceCreateManyDeviceInputEnvelope
    set?: Enumerable<BasketDeviceWhereUniqueInput>
    disconnect?: Enumerable<BasketDeviceWhereUniqueInput>
    delete?: Enumerable<BasketDeviceWhereUniqueInput>
    connect?: Enumerable<BasketDeviceWhereUniqueInput>
    update?: Enumerable<BasketDeviceUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<BasketDeviceUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<BasketDeviceScalarWhereInput>
  }

  export type DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<DeviceInfoCreateWithoutDeviceInput>, Enumerable<DeviceInfoUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<DeviceInfoCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<DeviceInfoUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: DeviceInfoCreateManyDeviceInputEnvelope
    set?: Enumerable<DeviceInfoWhereUniqueInput>
    disconnect?: Enumerable<DeviceInfoWhereUniqueInput>
    delete?: Enumerable<DeviceInfoWhereUniqueInput>
    connect?: Enumerable<DeviceInfoWhereUniqueInput>
    update?: Enumerable<DeviceInfoUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<DeviceInfoUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<DeviceInfoScalarWhereInput>
  }

  export type RatingUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutDeviceInput>, Enumerable<RatingUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: RatingCreateManyDeviceInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type DeviceCreateNestedOneWithoutDeviceInfoInput = {
    create?: XOR<DeviceCreateWithoutDeviceInfoInput, DeviceUncheckedCreateWithoutDeviceInfoInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDeviceInfoInput
    connect?: DeviceWhereUniqueInput
  }

  export type DeviceUpdateOneRequiredWithoutDeviceInfoNestedInput = {
    create?: XOR<DeviceCreateWithoutDeviceInfoInput, DeviceUncheckedCreateWithoutDeviceInfoInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutDeviceInfoInput
    upsert?: DeviceUpsertWithoutDeviceInfoInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutDeviceInfoInput, DeviceUncheckedUpdateWithoutDeviceInfoInput>
  }

  export type UserCreateNestedOneWithoutRatingInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    connect?: UserWhereUniqueInput
  }

  export type DeviceCreateNestedOneWithoutRatingInput = {
    create?: XOR<DeviceCreateWithoutRatingInput, DeviceUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutRatingInput
    connect?: DeviceWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    upsert?: UserUpsertWithoutRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
  }

  export type DeviceUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<DeviceCreateWithoutRatingInput, DeviceUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutRatingInput
    upsert?: DeviceUpsertWithoutRatingInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<DeviceUpdateWithoutRatingInput, DeviceUncheckedUpdateWithoutRatingInput>
  }

  export type DeviceCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutTypeInput>, Enumerable<DeviceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutTypeInput>
    createMany?: DeviceCreateManyTypeInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type TypeBrandCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutTypeInput>, Enumerable<TypeBrandUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutTypeInput>
    createMany?: TypeBrandCreateManyTypeInputEnvelope
    connect?: Enumerable<TypeBrandWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutTypeInput>, Enumerable<DeviceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutTypeInput>
    createMany?: DeviceCreateManyTypeInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type TypeBrandUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutTypeInput>, Enumerable<TypeBrandUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutTypeInput>
    createMany?: TypeBrandCreateManyTypeInputEnvelope
    connect?: Enumerable<TypeBrandWhereUniqueInput>
  }

  export type DeviceUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutTypeInput>, Enumerable<DeviceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: DeviceCreateManyTypeInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type TypeBrandUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutTypeInput>, Enumerable<TypeBrandUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<TypeBrandUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: TypeBrandCreateManyTypeInputEnvelope
    set?: Enumerable<TypeBrandWhereUniqueInput>
    disconnect?: Enumerable<TypeBrandWhereUniqueInput>
    delete?: Enumerable<TypeBrandWhereUniqueInput>
    connect?: Enumerable<TypeBrandWhereUniqueInput>
    update?: Enumerable<TypeBrandUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<TypeBrandUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<TypeBrandScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutTypeInput>, Enumerable<DeviceUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: DeviceCreateManyTypeInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type TypeBrandUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutTypeInput>, Enumerable<TypeBrandUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<TypeBrandUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: TypeBrandCreateManyTypeInputEnvelope
    set?: Enumerable<TypeBrandWhereUniqueInput>
    disconnect?: Enumerable<TypeBrandWhereUniqueInput>
    delete?: Enumerable<TypeBrandWhereUniqueInput>
    connect?: Enumerable<TypeBrandWhereUniqueInput>
    update?: Enumerable<TypeBrandUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<TypeBrandUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<TypeBrandScalarWhereInput>
  }

  export type DeviceCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutBrandInput>, Enumerable<DeviceUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutBrandInput>
    createMany?: DeviceCreateManyBrandInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type TypeBrandCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutBrandInput>, Enumerable<TypeBrandUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutBrandInput>
    createMany?: TypeBrandCreateManyBrandInputEnvelope
    connect?: Enumerable<TypeBrandWhereUniqueInput>
  }

  export type DeviceUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutBrandInput>, Enumerable<DeviceUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutBrandInput>
    createMany?: DeviceCreateManyBrandInputEnvelope
    connect?: Enumerable<DeviceWhereUniqueInput>
  }

  export type TypeBrandUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutBrandInput>, Enumerable<TypeBrandUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutBrandInput>
    createMany?: TypeBrandCreateManyBrandInputEnvelope
    connect?: Enumerable<TypeBrandWhereUniqueInput>
  }

  export type DeviceUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutBrandInput>, Enumerable<DeviceUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: DeviceCreateManyBrandInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type TypeBrandUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutBrandInput>, Enumerable<TypeBrandUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<TypeBrandUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: TypeBrandCreateManyBrandInputEnvelope
    set?: Enumerable<TypeBrandWhereUniqueInput>
    disconnect?: Enumerable<TypeBrandWhereUniqueInput>
    delete?: Enumerable<TypeBrandWhereUniqueInput>
    connect?: Enumerable<TypeBrandWhereUniqueInput>
    update?: Enumerable<TypeBrandUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<TypeBrandUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<TypeBrandScalarWhereInput>
  }

  export type DeviceUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<DeviceCreateWithoutBrandInput>, Enumerable<DeviceUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<DeviceCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<DeviceUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: DeviceCreateManyBrandInputEnvelope
    set?: Enumerable<DeviceWhereUniqueInput>
    disconnect?: Enumerable<DeviceWhereUniqueInput>
    delete?: Enumerable<DeviceWhereUniqueInput>
    connect?: Enumerable<DeviceWhereUniqueInput>
    update?: Enumerable<DeviceUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<DeviceUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<DeviceScalarWhereInput>
  }

  export type TypeBrandUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<Enumerable<TypeBrandCreateWithoutBrandInput>, Enumerable<TypeBrandUncheckedCreateWithoutBrandInput>>
    connectOrCreate?: Enumerable<TypeBrandCreateOrConnectWithoutBrandInput>
    upsert?: Enumerable<TypeBrandUpsertWithWhereUniqueWithoutBrandInput>
    createMany?: TypeBrandCreateManyBrandInputEnvelope
    set?: Enumerable<TypeBrandWhereUniqueInput>
    disconnect?: Enumerable<TypeBrandWhereUniqueInput>
    delete?: Enumerable<TypeBrandWhereUniqueInput>
    connect?: Enumerable<TypeBrandWhereUniqueInput>
    update?: Enumerable<TypeBrandUpdateWithWhereUniqueWithoutBrandInput>
    updateMany?: Enumerable<TypeBrandUpdateManyWithWhereWithoutBrandInput>
    deleteMany?: Enumerable<TypeBrandScalarWhereInput>
  }

  export type TypeCreateNestedOneWithoutBrandInput = {
    create?: XOR<TypeCreateWithoutBrandInput, TypeUncheckedCreateWithoutBrandInput>
    connectOrCreate?: TypeCreateOrConnectWithoutBrandInput
    connect?: TypeWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutTypeInput = {
    create?: XOR<BrandCreateWithoutTypeInput, BrandUncheckedCreateWithoutTypeInput>
    connectOrCreate?: BrandCreateOrConnectWithoutTypeInput
    connect?: BrandWhereUniqueInput
  }

  export type TypeUpdateOneWithoutBrandNestedInput = {
    create?: XOR<TypeCreateWithoutBrandInput, TypeUncheckedCreateWithoutBrandInput>
    connectOrCreate?: TypeCreateOrConnectWithoutBrandInput
    upsert?: TypeUpsertWithoutBrandInput
    disconnect?: boolean
    delete?: boolean
    connect?: TypeWhereUniqueInput
    update?: XOR<TypeUpdateWithoutBrandInput, TypeUncheckedUpdateWithoutBrandInput>
  }

  export type BrandUpdateOneWithoutTypeNestedInput = {
    create?: XOR<BrandCreateWithoutTypeInput, BrandUncheckedCreateWithoutTypeInput>
    connectOrCreate?: BrandCreateOrConnectWithoutTypeInput
    upsert?: BrandUpsertWithoutTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<BrandUpdateWithoutTypeInput, BrandUncheckedUpdateWithoutTypeInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BasketCreateWithoutUserInput = {
    id?: string
    basketDevice?: BasketDeviceCreateNestedManyWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutUserInput = {
    id?: string
    basketDevice?: BasketDeviceUncheckedCreateNestedManyWithoutBasketInput
  }

  export type BasketCreateOrConnectWithoutUserInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    rate: number
    device: DeviceCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    rate: number
    deviceId: string
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: Enumerable<RatingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BasketUpsertWithoutUserInput = {
    update: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    basketDevice?: BasketDeviceUpdateManyWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    basketDevice?: BasketDeviceUncheckedUpdateManyWithoutBasketNestedInput
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutRatingInput>
  }

  export type RatingScalarWhereInput = {
    AND?: Enumerable<RatingScalarWhereInput>
    OR?: Enumerable<RatingScalarWhereInput>
    NOT?: Enumerable<RatingScalarWhereInput>
    id?: StringFilter | string
    rate?: IntFilter | number
    userId?: StringFilter | string
    deviceId?: StringFilter | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    token?: StringFilter | string
    userId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeNullableFilter | Date | string | null
  }

  export type UserCreateWithoutSessionInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketCreateNestedOneWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedCreateNestedOneWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUpdateOneWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedUpdateOneWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBasketInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    rating?: RatingCreateNestedManyWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBasketInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBasketInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
  }

  export type BasketDeviceCreateWithoutBasketInput = {
    device: DeviceCreateNestedOneWithoutDevicesInput
  }

  export type BasketDeviceUncheckedCreateWithoutBasketInput = {
    deviceId: string
  }

  export type BasketDeviceCreateOrConnectWithoutBasketInput = {
    where: BasketDeviceWhereUniqueInput
    create: XOR<BasketDeviceCreateWithoutBasketInput, BasketDeviceUncheckedCreateWithoutBasketInput>
  }

  export type BasketDeviceCreateManyBasketInputEnvelope = {
    data: Enumerable<BasketDeviceCreateManyBasketInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBasketInput = {
    update: XOR<UserUpdateWithoutBasketInput, UserUncheckedUpdateWithoutBasketInput>
    create: XOR<UserCreateWithoutBasketInput, UserUncheckedCreateWithoutBasketInput>
  }

  export type UserUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    rating?: RatingUpdateManyWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BasketDeviceUpsertWithWhereUniqueWithoutBasketInput = {
    where: BasketDeviceWhereUniqueInput
    update: XOR<BasketDeviceUpdateWithoutBasketInput, BasketDeviceUncheckedUpdateWithoutBasketInput>
    create: XOR<BasketDeviceCreateWithoutBasketInput, BasketDeviceUncheckedCreateWithoutBasketInput>
  }

  export type BasketDeviceUpdateWithWhereUniqueWithoutBasketInput = {
    where: BasketDeviceWhereUniqueInput
    data: XOR<BasketDeviceUpdateWithoutBasketInput, BasketDeviceUncheckedUpdateWithoutBasketInput>
  }

  export type BasketDeviceUpdateManyWithWhereWithoutBasketInput = {
    where: BasketDeviceScalarWhereInput
    data: XOR<BasketDeviceUpdateManyMutationInput, BasketDeviceUncheckedUpdateManyWithoutBasketDeviceInput>
  }

  export type BasketDeviceScalarWhereInput = {
    AND?: Enumerable<BasketDeviceScalarWhereInput>
    OR?: Enumerable<BasketDeviceScalarWhereInput>
    NOT?: Enumerable<BasketDeviceScalarWhereInput>
    basketId?: StringFilter | string
    deviceId?: StringFilter | string
  }

  export type BasketCreateWithoutBasketDeviceInput = {
    id?: string
    user: UserCreateNestedOneWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutBasketDeviceInput = {
    id?: string
    userId: string
  }

  export type BasketCreateOrConnectWithoutBasketDeviceInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutBasketDeviceInput, BasketUncheckedCreateWithoutBasketDeviceInput>
  }

  export type DeviceCreateWithoutDevicesInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    deviceInfo?: DeviceInfoCreateNestedManyWithoutDeviceInput
    rating?: RatingCreateNestedManyWithoutDeviceInput
    type?: TypeCreateNestedOneWithoutDeviceInput
    brand?: BrandCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutDevicesInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    brandId?: string | null
    deviceInfo?: DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput
    rating?: RatingUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutDevicesInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutDevicesInput, DeviceUncheckedCreateWithoutDevicesInput>
  }

  export type BasketUpsertWithoutBasketDeviceInput = {
    update: XOR<BasketUpdateWithoutBasketDeviceInput, BasketUncheckedUpdateWithoutBasketDeviceInput>
    create: XOR<BasketCreateWithoutBasketDeviceInput, BasketUncheckedCreateWithoutBasketDeviceInput>
  }

  export type BasketUpdateWithoutBasketDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutBasketDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceUpsertWithoutDevicesInput = {
    update: XOR<DeviceUpdateWithoutDevicesInput, DeviceUncheckedUpdateWithoutDevicesInput>
    create: XOR<DeviceCreateWithoutDevicesInput, DeviceUncheckedCreateWithoutDevicesInput>
  }

  export type DeviceUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: DeviceInfoUpdateManyWithoutDeviceNestedInput
    rating?: RatingUpdateManyWithoutDeviceNestedInput
    type?: TypeUpdateOneWithoutDeviceNestedInput
    brand?: BrandUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type BasketDeviceCreateWithoutDeviceInput = {
    basket: BasketCreateNestedOneWithoutBasketDeviceInput
  }

  export type BasketDeviceUncheckedCreateWithoutDeviceInput = {
    basketId: string
  }

  export type BasketDeviceCreateOrConnectWithoutDeviceInput = {
    where: BasketDeviceWhereUniqueInput
    create: XOR<BasketDeviceCreateWithoutDeviceInput, BasketDeviceUncheckedCreateWithoutDeviceInput>
  }

  export type BasketDeviceCreateManyDeviceInputEnvelope = {
    data: Enumerable<BasketDeviceCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type DeviceInfoCreateWithoutDeviceInput = {
    id?: string
    title: string
    description: string
  }

  export type DeviceInfoUncheckedCreateWithoutDeviceInput = {
    id?: string
    title: string
    description: string
  }

  export type DeviceInfoCreateOrConnectWithoutDeviceInput = {
    where: DeviceInfoWhereUniqueInput
    create: XOR<DeviceInfoCreateWithoutDeviceInput, DeviceInfoUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceInfoCreateManyDeviceInputEnvelope = {
    data: Enumerable<DeviceInfoCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutDeviceInput = {
    id?: string
    rate: number
    user: UserCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutDeviceInput = {
    id?: string
    rate: number
    userId: string
  }

  export type RatingCreateOrConnectWithoutDeviceInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutDeviceInput, RatingUncheckedCreateWithoutDeviceInput>
  }

  export type RatingCreateManyDeviceInputEnvelope = {
    data: Enumerable<RatingCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type TypeCreateWithoutDeviceInput = {
    id?: string
    name: string
    brand?: TypeBrandCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateWithoutDeviceInput = {
    id?: string
    name: string
    brand?: TypeBrandUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeCreateOrConnectWithoutDeviceInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutDeviceInput, TypeUncheckedCreateWithoutDeviceInput>
  }

  export type BrandCreateWithoutDeviceInput = {
    id?: string
    name: string
    type?: TypeBrandCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutDeviceInput = {
    id?: string
    name: string
    type?: TypeBrandUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutDeviceInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutDeviceInput, BrandUncheckedCreateWithoutDeviceInput>
  }

  export type BasketDeviceUpsertWithWhereUniqueWithoutDeviceInput = {
    where: BasketDeviceWhereUniqueInput
    update: XOR<BasketDeviceUpdateWithoutDeviceInput, BasketDeviceUncheckedUpdateWithoutDeviceInput>
    create: XOR<BasketDeviceCreateWithoutDeviceInput, BasketDeviceUncheckedCreateWithoutDeviceInput>
  }

  export type BasketDeviceUpdateWithWhereUniqueWithoutDeviceInput = {
    where: BasketDeviceWhereUniqueInput
    data: XOR<BasketDeviceUpdateWithoutDeviceInput, BasketDeviceUncheckedUpdateWithoutDeviceInput>
  }

  export type BasketDeviceUpdateManyWithWhereWithoutDeviceInput = {
    where: BasketDeviceScalarWhereInput
    data: XOR<BasketDeviceUpdateManyMutationInput, BasketDeviceUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DeviceInfoUpsertWithWhereUniqueWithoutDeviceInput = {
    where: DeviceInfoWhereUniqueInput
    update: XOR<DeviceInfoUpdateWithoutDeviceInput, DeviceInfoUncheckedUpdateWithoutDeviceInput>
    create: XOR<DeviceInfoCreateWithoutDeviceInput, DeviceInfoUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceInfoUpdateWithWhereUniqueWithoutDeviceInput = {
    where: DeviceInfoWhereUniqueInput
    data: XOR<DeviceInfoUpdateWithoutDeviceInput, DeviceInfoUncheckedUpdateWithoutDeviceInput>
  }

  export type DeviceInfoUpdateManyWithWhereWithoutDeviceInput = {
    where: DeviceInfoScalarWhereInput
    data: XOR<DeviceInfoUpdateManyMutationInput, DeviceInfoUncheckedUpdateManyWithoutDeviceInfoInput>
  }

  export type DeviceInfoScalarWhereInput = {
    AND?: Enumerable<DeviceInfoScalarWhereInput>
    OR?: Enumerable<DeviceInfoScalarWhereInput>
    NOT?: Enumerable<DeviceInfoScalarWhereInput>
    id?: StringFilter | string
    deviceId?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
  }

  export type RatingUpsertWithWhereUniqueWithoutDeviceInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutDeviceInput, RatingUncheckedUpdateWithoutDeviceInput>
    create: XOR<RatingCreateWithoutDeviceInput, RatingUncheckedCreateWithoutDeviceInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutDeviceInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutDeviceInput, RatingUncheckedUpdateWithoutDeviceInput>
  }

  export type RatingUpdateManyWithWhereWithoutDeviceInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutRatingInput>
  }

  export type TypeUpsertWithoutDeviceInput = {
    update: XOR<TypeUpdateWithoutDeviceInput, TypeUncheckedUpdateWithoutDeviceInput>
    create: XOR<TypeCreateWithoutDeviceInput, TypeUncheckedCreateWithoutDeviceInput>
  }

  export type TypeUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: TypeBrandUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: TypeBrandUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type BrandUpsertWithoutDeviceInput = {
    update: XOR<BrandUpdateWithoutDeviceInput, BrandUncheckedUpdateWithoutDeviceInput>
    create: XOR<BrandCreateWithoutDeviceInput, BrandUncheckedCreateWithoutDeviceInput>
  }

  export type BrandUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: TypeBrandUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: TypeBrandUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type DeviceCreateWithoutDeviceInfoInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    devices?: BasketDeviceCreateNestedManyWithoutDeviceInput
    rating?: RatingCreateNestedManyWithoutDeviceInput
    type?: TypeCreateNestedOneWithoutDeviceInput
    brand?: BrandCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutDeviceInfoInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    brandId?: string | null
    devices?: BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput
    rating?: RatingUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutDeviceInfoInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutDeviceInfoInput, DeviceUncheckedCreateWithoutDeviceInfoInput>
  }

  export type DeviceUpsertWithoutDeviceInfoInput = {
    update: XOR<DeviceUpdateWithoutDeviceInfoInput, DeviceUncheckedUpdateWithoutDeviceInfoInput>
    create: XOR<DeviceCreateWithoutDeviceInfoInput, DeviceUncheckedCreateWithoutDeviceInfoInput>
  }

  export type DeviceUpdateWithoutDeviceInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUpdateManyWithoutDeviceNestedInput
    rating?: RatingUpdateManyWithoutDeviceNestedInput
    type?: TypeUpdateOneWithoutDeviceNestedInput
    brand?: BrandUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutDeviceInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type UserCreateWithoutRatingInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketCreateNestedOneWithoutUserInput
    session?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingInput = {
    id?: string
    name: string
    surname?: string | null
    username?: string | null
    password?: string | null
    photoPath?: string | null
    phoneNumber?: string | null
    isAdmin?: boolean
    role?: string
    permissions: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedCreateNestedOneWithoutUserInput
    session?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type DeviceCreateWithoutRatingInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    devices?: BasketDeviceCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoCreateNestedManyWithoutDeviceInput
    type?: TypeCreateNestedOneWithoutDeviceInput
    brand?: BrandCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutRatingInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    brandId?: string | null
    devices?: BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutRatingInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutRatingInput, DeviceUncheckedCreateWithoutRatingInput>
  }

  export type UserUpsertWithoutRatingInput = {
    update: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type UserUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUpdateOneWithoutUserNestedInput
    session?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    photoPath?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    permissions?: JsonNullValueInput | InputJsonValue
    basket?: BasketUncheckedUpdateOneWithoutUserNestedInput
    session?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DeviceUpsertWithoutRatingInput = {
    update: XOR<DeviceUpdateWithoutRatingInput, DeviceUncheckedUpdateWithoutRatingInput>
    create: XOR<DeviceCreateWithoutRatingInput, DeviceUncheckedCreateWithoutRatingInput>
  }

  export type DeviceUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUpdateManyWithoutDeviceNestedInput
    type?: TypeUpdateOneWithoutDeviceNestedInput
    brand?: BrandUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateWithoutTypeInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    devices?: BasketDeviceCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoCreateNestedManyWithoutDeviceInput
    rating?: RatingCreateNestedManyWithoutDeviceInput
    brand?: BrandCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutTypeInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    brandId?: string | null
    devices?: BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput
    rating?: RatingUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutTypeInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutTypeInput, DeviceUncheckedCreateWithoutTypeInput>
  }

  export type DeviceCreateManyTypeInputEnvelope = {
    data: Enumerable<DeviceCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type TypeBrandCreateWithoutTypeInput = {
    id?: string
    brand?: BrandCreateNestedOneWithoutTypeInput
  }

  export type TypeBrandUncheckedCreateWithoutTypeInput = {
    id?: string
    brandId?: string | null
  }

  export type TypeBrandCreateOrConnectWithoutTypeInput = {
    where: TypeBrandWhereUniqueInput
    create: XOR<TypeBrandCreateWithoutTypeInput, TypeBrandUncheckedCreateWithoutTypeInput>
  }

  export type TypeBrandCreateManyTypeInputEnvelope = {
    data: Enumerable<TypeBrandCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithWhereUniqueWithoutTypeInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutTypeInput, DeviceUncheckedUpdateWithoutTypeInput>
    create: XOR<DeviceCreateWithoutTypeInput, DeviceUncheckedCreateWithoutTypeInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutTypeInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutTypeInput, DeviceUncheckedUpdateWithoutTypeInput>
  }

  export type DeviceUpdateManyWithWhereWithoutTypeInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDeviceInput>
  }

  export type DeviceScalarWhereInput = {
    AND?: Enumerable<DeviceScalarWhereInput>
    OR?: Enumerable<DeviceScalarWhereInput>
    NOT?: Enumerable<DeviceScalarWhereInput>
    id?: StringFilter | string
    staticId?: IntNullableFilter | number | null
    name?: StringFilter | string
    price?: StringFilter | string
    rate?: IntNullableFilter | number | null
    count?: IntFilter | number
    pathImg?: StringNullableFilter | string | null
    typeId?: StringNullableFilter | string | null
    brandId?: StringNullableFilter | string | null
  }

  export type TypeBrandUpsertWithWhereUniqueWithoutTypeInput = {
    where: TypeBrandWhereUniqueInput
    update: XOR<TypeBrandUpdateWithoutTypeInput, TypeBrandUncheckedUpdateWithoutTypeInput>
    create: XOR<TypeBrandCreateWithoutTypeInput, TypeBrandUncheckedCreateWithoutTypeInput>
  }

  export type TypeBrandUpdateWithWhereUniqueWithoutTypeInput = {
    where: TypeBrandWhereUniqueInput
    data: XOR<TypeBrandUpdateWithoutTypeInput, TypeBrandUncheckedUpdateWithoutTypeInput>
  }

  export type TypeBrandUpdateManyWithWhereWithoutTypeInput = {
    where: TypeBrandScalarWhereInput
    data: XOR<TypeBrandUpdateManyMutationInput, TypeBrandUncheckedUpdateManyWithoutBrandInput>
  }

  export type TypeBrandScalarWhereInput = {
    AND?: Enumerable<TypeBrandScalarWhereInput>
    OR?: Enumerable<TypeBrandScalarWhereInput>
    NOT?: Enumerable<TypeBrandScalarWhereInput>
    id?: StringFilter | string
    typeId?: StringNullableFilter | string | null
    brandId?: StringNullableFilter | string | null
  }

  export type DeviceCreateWithoutBrandInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    devices?: BasketDeviceCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoCreateNestedManyWithoutDeviceInput
    rating?: RatingCreateNestedManyWithoutDeviceInput
    type?: TypeCreateNestedOneWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutBrandInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
    devices?: BasketDeviceUncheckedCreateNestedManyWithoutDeviceInput
    deviceInfo?: DeviceInfoUncheckedCreateNestedManyWithoutDeviceInput
    rating?: RatingUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutBrandInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutBrandInput, DeviceUncheckedCreateWithoutBrandInput>
  }

  export type DeviceCreateManyBrandInputEnvelope = {
    data: Enumerable<DeviceCreateManyBrandInput>
    skipDuplicates?: boolean
  }

  export type TypeBrandCreateWithoutBrandInput = {
    id?: string
    type?: TypeCreateNestedOneWithoutBrandInput
  }

  export type TypeBrandUncheckedCreateWithoutBrandInput = {
    id?: string
    typeId?: string | null
  }

  export type TypeBrandCreateOrConnectWithoutBrandInput = {
    where: TypeBrandWhereUniqueInput
    create: XOR<TypeBrandCreateWithoutBrandInput, TypeBrandUncheckedCreateWithoutBrandInput>
  }

  export type TypeBrandCreateManyBrandInputEnvelope = {
    data: Enumerable<TypeBrandCreateManyBrandInput>
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithWhereUniqueWithoutBrandInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutBrandInput, DeviceUncheckedUpdateWithoutBrandInput>
    create: XOR<DeviceCreateWithoutBrandInput, DeviceUncheckedCreateWithoutBrandInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutBrandInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutBrandInput, DeviceUncheckedUpdateWithoutBrandInput>
  }

  export type DeviceUpdateManyWithWhereWithoutBrandInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutDeviceInput>
  }

  export type TypeBrandUpsertWithWhereUniqueWithoutBrandInput = {
    where: TypeBrandWhereUniqueInput
    update: XOR<TypeBrandUpdateWithoutBrandInput, TypeBrandUncheckedUpdateWithoutBrandInput>
    create: XOR<TypeBrandCreateWithoutBrandInput, TypeBrandUncheckedCreateWithoutBrandInput>
  }

  export type TypeBrandUpdateWithWhereUniqueWithoutBrandInput = {
    where: TypeBrandWhereUniqueInput
    data: XOR<TypeBrandUpdateWithoutBrandInput, TypeBrandUncheckedUpdateWithoutBrandInput>
  }

  export type TypeBrandUpdateManyWithWhereWithoutBrandInput = {
    where: TypeBrandScalarWhereInput
    data: XOR<TypeBrandUpdateManyMutationInput, TypeBrandUncheckedUpdateManyWithoutTypeInput>
  }

  export type TypeCreateWithoutBrandInput = {
    id?: string
    name: string
    device?: DeviceCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    device?: DeviceUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeCreateOrConnectWithoutBrandInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutBrandInput, TypeUncheckedCreateWithoutBrandInput>
  }

  export type BrandCreateWithoutTypeInput = {
    id?: string
    name: string
    device?: DeviceCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateWithoutTypeInput = {
    id?: string
    name: string
    device?: DeviceUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutTypeInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutTypeInput, BrandUncheckedCreateWithoutTypeInput>
  }

  export type TypeUpsertWithoutBrandInput = {
    update: XOR<TypeUpdateWithoutBrandInput, TypeUncheckedUpdateWithoutBrandInput>
    create: XOR<TypeCreateWithoutBrandInput, TypeUncheckedCreateWithoutBrandInput>
  }

  export type TypeUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type BrandUpsertWithoutTypeInput = {
    update: XOR<BrandUpdateWithoutTypeInput, BrandUncheckedUpdateWithoutTypeInput>
    create: XOR<BrandCreateWithoutTypeInput, BrandUncheckedCreateWithoutTypeInput>
  }

  export type BrandUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    device?: DeviceUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type RatingCreateManyUserInput = {
    id?: string
    rate: number
    deviceId: string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type RatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    device?: DeviceUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingUncheckedUpdateManyWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BasketDeviceCreateManyBasketInput = {
    deviceId: string
  }

  export type BasketDeviceUpdateWithoutBasketInput = {
    device?: DeviceUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type BasketDeviceUncheckedUpdateWithoutBasketInput = {
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketDeviceUncheckedUpdateManyWithoutBasketDeviceInput = {
    deviceId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketDeviceCreateManyDeviceInput = {
    basketId: string
  }

  export type DeviceInfoCreateManyDeviceInput = {
    id?: string
    title: string
    description: string
  }

  export type RatingCreateManyDeviceInput = {
    id?: string
    rate: number
    userId: string
  }

  export type BasketDeviceUpdateWithoutDeviceInput = {
    basket?: BasketUpdateOneRequiredWithoutBasketDeviceNestedInput
  }

  export type BasketDeviceUncheckedUpdateWithoutDeviceInput = {
    basketId?: StringFieldUpdateOperationsInput | string
  }

  export type BasketDeviceUncheckedUpdateManyWithoutDevicesInput = {
    basketId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceInfoUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceInfoUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceInfoUncheckedUpdateManyWithoutDeviceInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RatingUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceCreateManyTypeInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    brandId?: string | null
  }

  export type TypeBrandCreateManyTypeInput = {
    id?: string
    brandId?: string | null
  }

  export type DeviceUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUpdateManyWithoutDeviceNestedInput
    rating?: RatingUpdateManyWithoutDeviceNestedInput
    brand?: BrandUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeBrandUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: BrandUpdateOneWithoutTypeNestedInput
  }

  export type TypeBrandUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeBrandUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceCreateManyBrandInput = {
    id?: string
    staticId?: number | null
    name: string
    price: string
    rate?: number | null
    count?: number
    pathImg?: string | null
    typeId?: string | null
  }

  export type TypeBrandCreateManyBrandInput = {
    id?: string
    typeId?: string | null
  }

  export type DeviceUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUpdateManyWithoutDeviceNestedInput
    rating?: RatingUpdateManyWithoutDeviceNestedInput
    type?: TypeUpdateOneWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    staticId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    rate?: NullableIntFieldUpdateOperationsInput | number | null
    count?: IntFieldUpdateOperationsInput | number
    pathImg?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    devices?: BasketDeviceUncheckedUpdateManyWithoutDeviceNestedInput
    deviceInfo?: DeviceInfoUncheckedUpdateManyWithoutDeviceNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type TypeBrandUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneWithoutBrandNestedInput
  }

  export type TypeBrandUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeBrandUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}